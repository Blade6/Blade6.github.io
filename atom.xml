<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blade6</title>
  <subtitle>Hello World</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blade6.top/"/>
  <updated>2017-05-21T02:19:52.574Z</updated>
  <id>http://blade6.top/</id>
  
  <author>
    <name>Blade6</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>指令重排</title>
    <link href="http://blade6.top/posts/c12d9bbd/"/>
    <id>http://blade6.top/posts/c12d9bbd/</id>
    <published>2017-05-21T02:12:54.530Z</published>
    <updated>2017-05-21T02:19:52.574Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>节选自《实战Java高并发程序设计》，有删改</p>
</blockquote>
<p>为什么要指令重排呢？让他一步一步执行多好呀！也不会那么多奇葩的问题。</p>
<p>之所以这么做，完全是因为性能考虑。我们知道，一条指令的执行时可以分为很多步骤的。简单地说，可以分为以下几步：</p>
<ul>
<li>取指 IF</li>
<li>译码和取寄存器操作数 ID</li>
<li>执行或者有效地址计算 EX</li>
<li>存储器访问MEM</li>
<li>写回WB</li>
</ul>
<p>由于每一个步骤都可能使用不同的硬件完成，因此，聪明的工程师们就发明了流水线技术来执行指令，如图1所示，显示了流水线的工作原理。<br><a id="more"></a></p>
<p><img src="http://oncw676n6.bkt.clouddn.com/%E6%8C%87%E4%BB%A4%E6%B5%81%E6%B0%B4%E7%BA%BF.png" alt="图1-指令流水线"></p>
<p>可以看到，当第2条指令执行时，第1条指令其实并未执行完，确切地说第1条指令还没开始执行，只是刚刚完成了取值操作而已。这样的好处非常明显，假如这里每一个步骤都需要花费1毫秒，那么指令2等待指令1完全执行后，再执行，则需要等待5毫秒，而使用流水线后，指令2只需要等待1毫秒就可以执行了。如此大的性能提升，当然让人眼红。更何况，实际的商业CPU的流水线级别甚至可以达到10级以上，则性能提升就更加明显。</p>
<p>而流水线总是害怕被中断，因为一旦中断，所有的硬件设备都会进入一个停顿期，再次满载又需要几个周期，因此，性能损失会比较大。而指令重排，就是为了减少中断而使用的技术。</p>
<p>让我们来看一个具体例子。图2展示了A=B+C这个操作的执行过程。写在左边的指令就是汇编指令。<br>LW R1,B表示把B的值加载到R1寄存器中。<br>ADD R3,R1,R2表示把R1、R2的值相加，并存放到R3中。<br>SW A,R3表示把R3寄存器的值保存到变量A中。</p>
<p><img src="http://oncw676n6.bkt.clouddn.com/A=B+C%E7%9A%84%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B.png" alt="图2-A=B+C的执行过程"></p>
<p>注意，在ADD指令上，有一个间隔，表示一个中断。为什么会中断？原因很简单，R2的数据还没有准备好。所以，ADD操作必须进行一次等待。由于ADD的延迟，导致其后面所有的指令都要慢一个节拍。</p>
<p>理解了上面这个例子，我们就可以来看一个更加复杂的情况。<br>a=b+c<br>d=e-f<br>上述代码的执行如图3所示。</p>
<p><img src="http://oncw676n6.bkt.clouddn.com/%E9%87%8D%E6%8E%92%E5%89%8D%E6%8C%87%E4%BB%A4%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B.png" alt="图3-重排前指令执行过程"></p>
<p>由于ADD和SUB都需要等待上一条指令的结果，因此，在这里插入了不少停顿。那么对于这段代码，是否有可能消除这些停顿呢？显然是可以的。我们只需要将LW Re,e和LW Rf,f移动到前面执行即可。思想很简单，先加载e和f对程序是没有影响的。既然在ADD的时候一定要停顿一下，那么停顿的时间还不如去做点有意义的事情。<br>重排后的结果如图4所示。可以看到，所有的停顿都已经消除，流水线已经可以十分顺畅地执行。</p>
<p><img src="http://oncw676n6.bkt.clouddn.com/%E9%87%8D%E6%8E%92%E5%90%8E%E7%9A%84%E6%8C%87%E4%BB%A4.png" alt="图4-重排后指令执行过程"></p>
<p>由此可见，指令重排对于提高CPU处理性能是十分必要的。虽然确实带来了乱序的问题，但是这点牺牲是完全值得的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;节选自《实战Java高并发程序设计》，有删改&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为什么要指令重排呢？让他一步一步执行多好呀！也不会那么多奇葩的问题。&lt;/p&gt;
&lt;p&gt;之所以这么做，完全是因为性能考虑。我们知道，一条指令的执行时可以分为很多步骤的。简单地说，可以分为以下几步：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;取指 IF&lt;/li&gt;
&lt;li&gt;译码和取寄存器操作数 ID&lt;/li&gt;
&lt;li&gt;执行或者有效地址计算 EX&lt;/li&gt;
&lt;li&gt;存储器访问MEM&lt;/li&gt;
&lt;li&gt;写回WB&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于每一个步骤都可能使用不同的硬件完成，因此，聪明的工程师们就发明了流水线技术来执行指令，如图1所示，显示了流水线的工作原理。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="http://blade6.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="编译原理" scheme="http://blade6.top/tags/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
      <category term="节选" scheme="http://blade6.top/tags/%E8%8A%82%E9%80%89/"/>
    
  </entry>
  
  <entry>
    <title>Roman to Integer</title>
    <link href="http://blade6.top/posts/9799a86c/"/>
    <id>http://blade6.top/posts/9799a86c/</id>
    <published>2017-05-03T08:17:20.647Z</published>
    <updated>2017-05-03T08:20:16.937Z</updated>
    
    <content type="html"><![CDATA[<p>罗马数字转整数。首先需要知道罗马数字的表示，百度一下就能找到。然后我首先想到了用HashMap把罗马符号和它对应的数字存起来，方便之后取用。<br><a id="more"></a><br>于是写出了第一个程序：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">romanToInt</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">    String[] signs = <span class="keyword">new</span> String[]&#123;</div><div class="line">        <span class="string">"I"</span>,<span class="string">"II"</span>,<span class="string">"III"</span>,<span class="string">"IV"</span>,<span class="string">"V"</span>,<span class="string">"VI"</span>,<span class="string">"VII"</span>,<span class="string">"VIII"</span>,<span class="string">"IX"</span>,</div><div class="line">        <span class="string">"X"</span>,<span class="string">"XX"</span>,<span class="string">"XXX"</span>,<span class="string">"XL"</span>,<span class="string">"L"</span>,<span class="string">"LX"</span>,<span class="string">"LXX"</span>,<span class="string">"LXXX"</span>,<span class="string">"XC"</span>,</div><div class="line">        <span class="string">"C"</span>,<span class="string">"CC"</span>,<span class="string">"CCC"</span>,<span class="string">"CD"</span>,<span class="string">"D"</span>,<span class="string">"DC"</span>,<span class="string">"DCC"</span>,<span class="string">"DCCC"</span>,<span class="string">"CM"</span>,</div><div class="line">        <span class="string">"M"</span>,<span class="string">"MM"</span>,<span class="string">"MMM"</span>&#125;;</div><div class="line">    <span class="keyword">int</span>[] number = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;</div><div class="line">        <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,</div><div class="line">        <span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">60</span>,<span class="number">70</span>,<span class="number">80</span>,<span class="number">90</span>,</div><div class="line">        <span class="number">100</span>,<span class="number">200</span>,<span class="number">300</span>,<span class="number">400</span>,<span class="number">500</span>,<span class="number">600</span>,<span class="number">700</span>,<span class="number">800</span>,<span class="number">900</span>,</div><div class="line">        <span class="number">1000</span>,<span class="number">2000</span>,<span class="number">3000</span></div><div class="line">    &#125;;</div><div class="line">    HashMap&lt;String, Integer&gt; num = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; signs.length; i++) &#123;</div><div class="line">        num.put(signs[i], number[i]);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">int</span> length = s.length();</div><div class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length;) &#123;</div><div class="line">        <span class="keyword">if</span> (length - i &gt;= <span class="number">4</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (num.containsKey(s.substring(i, i + <span class="number">4</span>))) &#123;</div><div class="line">                result += num.get(s.substring(i, i + <span class="number">4</span>));</div><div class="line">                i += <span class="number">4</span>;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;    </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (length - i &gt;= <span class="number">3</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (num.containsKey(s.substring(i, i + <span class="number">3</span>))) &#123;</div><div class="line">                result += num.get(s.substring(i, i + <span class="number">3</span>));</div><div class="line">                i += <span class="number">3</span>;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;        </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (length - i &gt;= <span class="number">2</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (num.containsKey(s.substring(i, i + <span class="number">2</span>))) &#123;</div><div class="line">                result += num.get(s.substring(i, i + <span class="number">2</span>));</div><div class="line">                i += <span class="number">2</span>;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;    </div><div class="line">        &#125;</div><div class="line">        result += num.get(s.substring(i, i + <span class="number">1</span>));</div><div class="line">        ++i;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>提交后虽然AC了，但是排名12%还是不太满意。仔细看看程序，发现可以优化，VIII实际上只需要存V和I就行了，并不需要单独存储。这样一来，程序可以简化如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">romanToInt</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</div><div class="line">    String[] signs = <span class="keyword">new</span> String[]&#123;</div><div class="line">        <span class="string">"I"</span>,<span class="string">"IV"</span>,<span class="string">"V"</span>,<span class="string">"VI"</span>,<span class="string">"IX"</span>,</div><div class="line">        <span class="string">"X"</span>,<span class="string">"XL"</span>,<span class="string">"L"</span>,<span class="string">"LX"</span>,<span class="string">"XC"</span>,</div><div class="line">        <span class="string">"C"</span>,<span class="string">"CD"</span>,<span class="string">"D"</span>,<span class="string">"DC"</span>,<span class="string">"CM"</span>,</div><div class="line">        <span class="string">"M"</span>&#125;;</div><div class="line">    <span class="keyword">int</span>[] number = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;</div><div class="line">        <span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">9</span>,</div><div class="line">        <span class="number">10</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">60</span>,<span class="number">90</span>,</div><div class="line">        <span class="number">100</span>,<span class="number">400</span>,<span class="number">500</span>,<span class="number">600</span>,<span class="number">900</span>,</div><div class="line">        <span class="number">1000</span></div><div class="line">    &#125;;</div><div class="line">    HashMap&lt;String, Integer&gt; num = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; signs.length; i++)</div><div class="line">        num.put(signs[i], number[i]);</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length();) &#123;</div><div class="line">        <span class="keyword">if</span> (i + <span class="number">1</span> &lt; s.length()) &#123;</div><div class="line">            <span class="keyword">if</span> (num.containsKey(s.substring(i, i+<span class="number">2</span>))) &#123;</div><div class="line">                result += num.get(s.substring(i, i+<span class="number">2</span>));</div><div class="line">                i += <span class="number">2</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                result += num.get(s.substring(i, i+<span class="number">1</span>));</div><div class="line">                ++i;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            result += num.get(s.substring(i, i+<span class="number">1</span>));</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>提交后当然也AC了，排名42%了。但是程序似乎还可以优化，比如VI不需要单独存储，因为VI可以通过V和I得到，但是如果去掉了VI、LX、DC的话，程序的执行速度是变慢的，理由很简单，因为nums.containsKey(s.substring(i,i+2))反正都要判断目前的两个字符，何必要多此一举把两个字符拆开走下面的else，这样实际上是浪费了效率。</p>
<p>除了上面的方法外，我还想到了另一种方法，代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">romanToInt</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</div><div class="line">    <span class="keyword">char</span>[] array = s.toCharArray();</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">0</span> ; i &lt; array.length; i++) &#123;</div><div class="line">        <span class="keyword">switch</span> (array[i]) &#123;</div><div class="line">        <span class="keyword">case</span> <span class="string">'I'</span>:</div><div class="line">            result += <span class="number">1</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">'V'</span>:</div><div class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; array[i-<span class="number">1</span>] == <span class="string">'I'</span>) result += <span class="number">3</span>;</div><div class="line">            <span class="keyword">else</span> result += <span class="number">5</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">'X'</span>:</div><div class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; array[i-<span class="number">1</span>] == <span class="string">'I'</span>) result += <span class="number">8</span>;</div><div class="line">            <span class="keyword">else</span> result += <span class="number">10</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">'L'</span>:</div><div class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; array[i-<span class="number">1</span>] == <span class="string">'X'</span>) result += <span class="number">30</span>;</div><div class="line">            <span class="keyword">else</span> result += <span class="number">50</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">'C'</span>:</div><div class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; array[i-<span class="number">1</span>] == <span class="string">'X'</span>) result += <span class="number">80</span>;</div><div class="line">            <span class="keyword">else</span> result += <span class="number">100</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">'D'</span>:</div><div class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; array[i-<span class="number">1</span>] == <span class="string">'C'</span>) result += <span class="number">300</span>;</div><div class="line">            <span class="keyword">else</span> result += <span class="number">500</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">'M'</span>:</div><div class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; array[i-<span class="number">1</span>] == <span class="string">'C'</span>) result += <span class="number">800</span>;</div><div class="line">            <span class="keyword">else</span> result += <span class="number">1000</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>不过表现不太出色，排名26%左右。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;罗马数字转整数。首先需要知道罗马数字的表示，百度一下就能找到。然后我首先想到了用HashMap把罗马符号和它对应的数字存起来，方便之后取用。&lt;br&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://blade6.top/categories/ACM/"/>
    
    
      <category term="Java" scheme="http://blade6.top/tags/Java/"/>
    
      <category term="leetcode" scheme="http://blade6.top/tags/leetcode/"/>
    
      <category term="String" scheme="http://blade6.top/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>String to Integer(atoi)</title>
    <link href="http://blade6.top/posts/ecbf921f/"/>
    <id>http://blade6.top/posts/ecbf921f/</id>
    <published>2017-05-02T13:13:24.234Z</published>
    <updated>2017-05-03T08:20:16.941Z</updated>
    
    <content type="html"><![CDATA[<p>把字符串转整数。这是一道考察代码健壮性的题目。当我第一次写好代码以为自己很厉害时，现实很快就狠狠地打脸。<br>我觉得代码之所以没写好，主要是想象力不够。总是有些脑回路特殊的人写出一些出乎意料的TestCase，真够变态的。<br><a id="more"></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">myAtoi</span><span class="params">(String str)</span> </span>&#123;</div><div class="line">    <span class="comment">// 处理字符串包含空格的情况，比如"   010"</span></div><div class="line">    str = str.trim();</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (str == <span class="keyword">null</span> || str.length() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;   </div><div class="line">    <span class="keyword">if</span> (str.length() == <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (!Character.isDigit(str.charAt(<span class="number">0</span>))) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">return</span> str.charAt(<span class="number">0</span>) - <span class="string">'0'</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">char</span>[] array = str.toCharArray();</div><div class="line">    <span class="comment">// 默认为正数</span></div><div class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (array[<span class="number">0</span>] == <span class="string">'-'</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (Character.isDigit(array[<span class="number">1</span>])) &#123;</div><div class="line">            ans = - (array[<span class="number">1</span>] - <span class="string">'0'</span>);</div><div class="line">            flag = <span class="keyword">false</span>;</div><div class="line">            index = <span class="number">2</span>;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (array[<span class="number">0</span>] == <span class="string">'+'</span>) &#123;</div><div class="line">        index = <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> (; index &lt; array.length ; index++) &#123;</div><div class="line">        <span class="keyword">if</span> (Character.isDigit(array[index])) &#123;</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> (ans * <span class="number">10</span> / <span class="number">10</span> != ans) &#123;</div><div class="line">                <span class="keyword">if</span> (flag) <span class="keyword">return</span> Integer.MAX_VALUE;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">return</span> Integer.MIN_VALUE;</div><div class="line">            &#125; <span class="keyword">else</span> ans *= <span class="number">10</span>;</div><div class="line">            </div><div class="line">            <span class="comment">//System.out.println("ans: " + ans);</span></div><div class="line">            </div><div class="line">            <span class="keyword">if</span> (flag) ans += array[index] - <span class="string">'0'</span>;</div><div class="line">            <span class="keyword">else</span> ans -= array[index] - <span class="string">'0'</span>;</div><div class="line">            </div><div class="line">            <span class="comment">// 当为正数时，结果却为负数，说明溢出了，返回最大正整数</span></div><div class="line">            <span class="keyword">if</span> (ans == Integer.MIN_VALUE &amp;&amp; flag) <span class="keyword">return</span> Integer.MAX_VALUE;</div><div class="line">            <span class="comment">// 与上述正相反</span></div><div class="line">            <span class="keyword">if</span> (ans == Integer.MAX_VALUE &amp;&amp; !flag) <span class="keyword">return</span> Integer.MIN_VALUE;</div><div class="line">            </div><div class="line">            <span class="comment">//System.out.println("ans: " + ans);</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> </div><div class="line">            <span class="keyword">return</span> ans;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (index == array.length) <span class="keyword">return</span> ans;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>写出来的代码虽然AC了，但是惨不忍睹，也不便于维护。看了看leetcode大神们写的简洁的代码，每一步都是如此地恰到好处，完美地演绎Just Enough的哲学。而我等小白，路还很长。</p>
<p>走过的坑(TestCases)：<br>“hello”,<br>“15”,<br>“-2147483647”,<br>“01234”,<br>“2147483648”,<br>“3333333333”,<br>“he123”,<br>“+444”,<br>“-2147483649”,<br>“-“,<br>“-3333333333”,<br>“    010”,<br>“01    12”,<br>“  12   “,<br>“     +004500”,<br>“123hehe”,<br>“   -  12”</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;把字符串转整数。这是一道考察代码健壮性的题目。当我第一次写好代码以为自己很厉害时，现实很快就狠狠地打脸。&lt;br&gt;我觉得代码之所以没写好，主要是想象力不够。总是有些脑回路特殊的人写出一些出乎意料的TestCase，真够变态的。&lt;br&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://blade6.top/categories/ACM/"/>
    
    
      <category term="Java" scheme="http://blade6.top/tags/Java/"/>
    
      <category term="leetcode" scheme="http://blade6.top/tags/leetcode/"/>
    
      <category term="String" scheme="http://blade6.top/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>Add Two Numbers</title>
    <link href="http://blade6.top/posts/64c8f80f/"/>
    <id>http://blade6.top/posts/64c8f80f/</id>
    <published>2017-04-25T02:59:37.092Z</published>
    <updated>2017-04-25T03:02:24.555Z</updated>
    
    <content type="html"><![CDATA[<p>给定两个非空链表，计算这两个链表所代表的数字的和。比如2-&gt;3-&gt;4和3-&gt;1-&gt;7表示的数字是432和713，需要求出和1145并返回链表5-&gt;4-&gt;1-&gt;1。</p>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>对于两个链表都从左往右进行扫描，相加，注意处理边界条件（两个链表一长一短）和进位情况，算法时间复杂度为O(N)。<br><a id="more"></a></p>
<h3 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h3><h4 id="具体描述"><a href="#具体描述" class="headerlink" title="具体描述"></a>具体描述</h4><p>l1指向链表1的当前结点，l2指向链表2的当前结点，l3指向结果链表的当前结点，result指向结果链表的头结点。用c表示进位情况，有进位时c为1。初始时，因为l1和l2都非空，将二者的值之和赋给l3，同时根据进位情况更改c的值。<br>首先循环判断l1的下一个结点是否非空，若非空，令l1指向下一个结点，同时l3也指向新结点（用0创建）。判断l2的下一个结点是否非空，来决定是把l1的值赋给l3还是把两链表结点值之和赋给l3，不要忘了进位情况。循环结束条件为l1所在链表没有更多结点了。<br>然后循环循环判断l2的下一个结点是否非空，此循环在链表1的长度比链表2的要短时有效。把链表2的剩余结点的值逐个赋给结果链表。<br>不要遗漏最后一个结点有进位的情况。</p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</div><div class="line">        ListNode l3 = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</div><div class="line">        ListNode result = l3;</div><div class="line">        <span class="keyword">int</span> c = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>(l1.val+l2.val&lt;<span class="number">10</span>) l3.val = l1.val+l2.val;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            l3.val = l1.val + l2.val - <span class="number">10</span>;</div><div class="line">            c = <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span>(l1.next != <span class="keyword">null</span>)&#123;</div><div class="line">            l1 = l1.next;</div><div class="line">            l3.next = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</div><div class="line">            l3 = l3.next;</div><div class="line">            <span class="keyword">if</span>(l2.next != <span class="keyword">null</span>)&#123;</div><div class="line">                l2 = l2.next;              </div><div class="line">                <span class="keyword">if</span>(l1.val+l2.val+c&lt;<span class="number">10</span>)&#123;</div><div class="line">                    l3.val = l1.val+l2.val+c;</div><div class="line">                    <span class="keyword">if</span>(c==<span class="number">1</span>) c=<span class="number">0</span>;</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    l3.val = l1.val + l2.val + c - <span class="number">10</span>;</div><div class="line">                    c = <span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">if</span>(l1.val + c &lt; <span class="number">10</span>)&#123;</div><div class="line">                    l3.val = l1.val + c;</div><div class="line">                    <span class="keyword">if</span>(c==<span class="number">1</span>) c=<span class="number">0</span>;</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    l3.val = l1.val + c - <span class="number">10</span>;</div><div class="line">                    c = <span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span>(l2.next != <span class="keyword">null</span>)&#123;</div><div class="line">            l2 = l2.next;</div><div class="line">            l3.next = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</div><div class="line">            l3 = l3.next;</div><div class="line">            <span class="keyword">if</span>(l2.val + c &lt; <span class="number">10</span>)&#123;</div><div class="line">                l3.val = l2.val + c;</div><div class="line">                <span class="keyword">if</span>(c==<span class="number">1</span>) c=<span class="number">0</span>;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                l3.val = l2.val + c - <span class="number">10</span>;</div><div class="line">                c = <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(c==<span class="number">1</span>)&#123;</div><div class="line">            l3.next = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>提交后AC通过，运行时间57ms，排名59%。这个代码的缺点是每次都用0去初始化新结点，然后再修改新结点的值，造成时间浪费。同时整体结构不够精简，有比较多的重复代码，不能让人一眼明白程序在做什么。</p>
<h3 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h3><h4 id="具体描述-1"><a href="#具体描述-1" class="headerlink" title="具体描述"></a>具体描述</h4><p>详见代码，代码是在观摩了众大神的代码后，稍微润色了一下，非常地简单优雅，一目了然。<br>第29行<code>return result.next;</code>干得漂亮！</p>
<h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</div><div class="line">        ListNode l3 = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</div><div class="line">        ListNode result = l3;</div><div class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> carry = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (l1 != <span class="keyword">null</span> || l2 != <span class="keyword">null</span> || carry != <span class="number">0</span>) &#123;</div><div class="line">            sum = carry;</div><div class="line">            <span class="keyword">if</span> (l1 != <span class="keyword">null</span>) &#123;</div><div class="line">                sum += l1.val;</div><div class="line">                l1 = l1.next;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (l2 != <span class="keyword">null</span>) &#123;</div><div class="line">                sum += l2.val;</div><div class="line">                l2 = l2.next;</div><div class="line">            &#125;</div><div class="line">            carry = sum / <span class="number">10</span>;</div><div class="line">            l3.next = sum &lt; <span class="number">10</span> ? <span class="keyword">new</span> ListNode(sum) : <span class="keyword">new</span> ListNode(sum - <span class="number">10</span>); </div><div class="line">            l3 = l3.next;</div><div class="line">        &#125;       </div><div class="line">        <span class="keyword">return</span> result.next;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>提交后AC，运行时间51ms，排名91%。<br>P.S.代码运行速度每减少1ms，幸福度增加10%。<br>P.S.S 其实我一开始写的代码略微有点不同，第18行写的是<code>l3.next = new ListNode(sum % 10);</code>，但是提交后提示超时，不知道leetcode搞什么飞机，没办法，我觉得代码是对的，又不想做修改，只好稍微修改敷衍一下。</p>
<h3 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h3><p>自己在本地编写代码调试时，可以对ListNode进行扩展，方便调试代码。</p>
<h4 id="ListNode"><a href="#ListNode" class="headerlink" title="ListNode"></a>ListNode</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> val;</div><div class="line">    ListNode next;</div><div class="line">    ListNode(<span class="keyword">int</span> x) &#123; val = x; &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 打印ListNode的每个值</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span> <span class="params">(ListNode temp)</span> </span>&#123;</div><div class="line">        <span class="keyword">while</span> (temp != <span class="keyword">null</span>) &#123;</div><div class="line">            System.out.print(temp.val + <span class="string">"-&gt;"</span>);</div><div class="line">            temp = temp.next;</div><div class="line">        &#125;</div><div class="line">        System.out.println();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 根据整数数组创建ListNode</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">create</span> <span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">        ListNode result = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</div><div class="line">        ListNode index = result;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) &#123;</div><div class="line">            ListNode cur = <span class="keyword">new</span> ListNode(num);</div><div class="line">            index.next = cur;</div><div class="line">            index = index.next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result.next;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定两个非空链表，计算这两个链表所代表的数字的和。比如2-&amp;gt;3-&amp;gt;4和3-&amp;gt;1-&amp;gt;7表示的数字是432和713，需要求出和1145并返回链表5-&amp;gt;4-&amp;gt;1-&amp;gt;1。&lt;/p&gt;
&lt;h3 id=&quot;解题思路&quot;&gt;&lt;a href=&quot;#解题思路&quot; class=&quot;headerlink&quot; title=&quot;解题思路&quot;&gt;&lt;/a&gt;解题思路&lt;/h3&gt;&lt;p&gt;对于两个链表都从左往右进行扫描，相加，注意处理边界条件（两个链表一长一短）和进位情况，算法时间复杂度为O(N)。&lt;br&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://blade6.top/categories/ACM/"/>
    
    
      <category term="Java" scheme="http://blade6.top/tags/Java/"/>
    
      <category term="leetcode" scheme="http://blade6.top/tags/leetcode/"/>
    
      <category term="List" scheme="http://blade6.top/tags/List/"/>
    
  </entry>
  
  <entry>
    <title>Longest Substring Without Repeating Characters</title>
    <link href="http://blade6.top/posts/8e8877f3/"/>
    <id>http://blade6.top/posts/8e8877f3/</id>
    <published>2017-04-24T08:27:26.188Z</published>
    <updated>2017-04-24T08:41:02.894Z</updated>
    
    <content type="html"><![CDATA[<p>给定字符串，求出它的不重复最长子串的长度。以下提供两种方法，时间复杂度都是O(N)级别，但因为O(N)只是描述了一个上界，而且是很模糊的，所以以下两个算法的真实运行时间还是有差异的。不过以下两个算法在本质上都是一样的，读者通读代码后不难发现这一点。</p>
<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>对于字符串s，用指针i从左往右顺序扫描该字符串，用temp记录当前的子字符串。当i所指向的字符未在temp中出现时，则temp加上i所指向的字符，同时i右移一位。当i所指向的字符x已经出现了时，判断temp的长度和最大值max，以决定是否将temp的长度赋给max。则temp应自行截断从起点到x为止的字符串，然后temp的剩余部分加上i所指向的字符构成新的temp，同时i右移一位。需要注意的是整个循环结束后，仍然要判断temp的长度和max的大小，因为循环体会漏掉最后一次判断。<br><a id="more"></a></p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(s.length()==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s.length()==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</div><div class="line">        String temp = <span class="string">""</span> + s.charAt(<span class="number">0</span>);</div><div class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span>(i&lt;s.length())&#123;</div><div class="line">            <span class="keyword">if</span>(temp.indexOf(s.charAt(i)) &gt;= <span class="number">0</span>)&#123;</div><div class="line">                <span class="keyword">if</span>(temp.length() &gt; max) max = temp.length();</div><div class="line">                <span class="keyword">int</span> index = temp.indexOf(s.charAt(i)) + <span class="number">1</span>;</div><div class="line">                temp = temp.substring(index) + s.charAt(i);</div><div class="line">                ++i;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                temp += s.charAt(i);</div><div class="line">                ++i;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(temp.length() &gt; max) max = temp.length();</div><div class="line">        <span class="keyword">return</span> max; </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此处贴的是AC了的代码，期间失败多次，不一一详述。运行速度排名47%。</p>
<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>对于字符串s，把它转化为字符数组str，数组可以随机存取，可以加快存取速度，str的每个元素都是一个字符。因为C语言中char的范围是-128~127，所以可以肯定TestCase的字符都是在这个范围里面的。所以虽然我是用Java写的，但是我仍然使用了一个布尔值的数组exist，长度为256，判断每个字符是否已经存在于子字符串中。<br>初始时令head指向str的第1个元素，tail指向str的第2个元素，同时将exist[str[0]]置为true，表示str的第1个元素在子字符串中已出现，所谓子字符串，指的是str的下标head到tail的区域的字符组合。然后tail不断右移。对于tail指向的元素，如果未在子字符串中出现，那么将tail指向的元素标记为已出现，同时tail右移一位。如果tail指向的元素已经在子字符串中出现了，那么head不断右移，在右移的过程中，每右移一位表示将一个元素踢出子字符串，这时要把踢出去的元素标记为未出现，因为已经被踢出去了，子字符串中不包含该元素了。右移的结束条件是将和tail指向的元素相同的元素踢出子字符串，这时head指向这个被踢出元素的下一个位置，同时tail指向下一个位置，不需要将最后踢出的元素标记为未出现，因为最后踢出的元素和加入的元素是同一个元素。<br>需要注意的地方和方法一相同，都是在循环的过程中会遗漏最后一次比较。</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (s.length() == <span class="number">0</span> || s.length() == <span class="number">1</span>) <span class="keyword">return</span> s.length();</div><div class="line">        </div><div class="line">        <span class="keyword">char</span>[] str = s.toCharArray();</div><div class="line">        </div><div class="line">        <span class="comment">//存在数组</span></div><div class="line">        <span class="keyword">boolean</span>[] exist = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">256</span>];</div><div class="line">        <span class="comment">//记录最大值</span></div><div class="line">        <span class="keyword">int</span> max = <span class="number">1</span>;</div><div class="line">        </div><div class="line">        <span class="comment">//头指针和尾指针</span></div><div class="line">        <span class="keyword">int</span> head = <span class="number">0</span>, tail = <span class="number">1</span>;</div><div class="line">        exist[str[<span class="number">0</span>]] = <span class="keyword">true</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span> (tail &lt; str.length) &#123;</div><div class="line">            <span class="keyword">if</span> (exist[str[tail]]) &#123;</div><div class="line">                <span class="keyword">if</span> (tail - head &gt; max) max = tail - head;</div><div class="line">                <span class="comment">//头指针要指向与尾指针相同字符的下一个位置</span></div><div class="line">                <span class="comment">//比如"abcdcef"</span></div><div class="line">                <span class="comment">//当tail指向第2个c时，head要指向d</span></div><div class="line">                <span class="keyword">while</span> (head &lt; tail) &#123;</div><div class="line">                    <span class="keyword">if</span> (str[head] == str[tail]) &#123;</div><div class="line">                        ++head;</div><div class="line">                        ++tail;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span> &#123;</div><div class="line">                        exist[str[head]] = <span class="keyword">false</span>;</div><div class="line">                        ++head;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;            </div><div class="line">                exist[str[tail]] = <span class="keyword">true</span>;</div><div class="line">                ++tail;</div><div class="line">            &#125;        </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (tail -head &gt; max) max = tail - head;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> max;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>提交后AC，运行速度排名99%。</p>
<h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><p>用于测试算法是否正确，包含一些典型的TestCase。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Solution demo = <span class="keyword">new</span> Solution();</div><div class="line">        String[] test = <span class="keyword">new</span> String[]&#123;<span class="string">"abcabcbb"</span>, <span class="string">"bbbbb"</span>, <span class="string">"pwwkew"</span>, <span class="string">"au"</span>, <span class="string">"c"</span>,</div><div class="line">                <span class="string">"dvdf"</span>, <span class="string">""</span>, <span class="string">"bab"</span>, <span class="string">"abcdbef"</span>, <span class="string">"abcdcef"</span>&#125;;</div><div class="line">        <span class="keyword">for</span> (String s : test)</div><div class="line">            System.out.println(s + <span class="string">":"</span> + demo.lengthOfLongestSubstring(s));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定字符串，求出它的不重复最长子串的长度。以下提供两种方法，时间复杂度都是O(N)级别，但因为O(N)只是描述了一个上界，而且是很模糊的，所以以下两个算法的真实运行时间还是有差异的。不过以下两个算法在本质上都是一样的，读者通读代码后不难发现这一点。&lt;/p&gt;
&lt;h2 id=&quot;方法一&quot;&gt;&lt;a href=&quot;#方法一&quot; class=&quot;headerlink&quot; title=&quot;方法一&quot;&gt;&lt;/a&gt;方法一&lt;/h2&gt;&lt;h3 id=&quot;解题思路&quot;&gt;&lt;a href=&quot;#解题思路&quot; class=&quot;headerlink&quot; title=&quot;解题思路&quot;&gt;&lt;/a&gt;解题思路&lt;/h3&gt;&lt;p&gt;对于字符串s，用指针i从左往右顺序扫描该字符串，用temp记录当前的子字符串。当i所指向的字符未在temp中出现时，则temp加上i所指向的字符，同时i右移一位。当i所指向的字符x已经出现了时，判断temp的长度和最大值max，以决定是否将temp的长度赋给max。则temp应自行截断从起点到x为止的字符串，然后temp的剩余部分加上i所指向的字符构成新的temp，同时i右移一位。需要注意的是整个循环结束后，仍然要判断temp的长度和max的大小，因为循环体会漏掉最后一次判断。&lt;br&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://blade6.top/categories/ACM/"/>
    
    
      <category term="Java" scheme="http://blade6.top/tags/Java/"/>
    
      <category term="leetcode" scheme="http://blade6.top/tags/leetcode/"/>
    
      <category term="String" scheme="http://blade6.top/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>Maximum Subarray</title>
    <link href="http://blade6.top/posts/b8913e5e/"/>
    <id>http://blade6.top/posts/b8913e5e/</id>
    <published>2017-04-23T14:05:29.819Z</published>
    <updated>2017-04-24T12:07:34.763Z</updated>
    
    <content type="html"><![CDATA[<p>给定数组，求数组中的所有子串中最大的子串和。<br>很容易就能想到O(n^3)的算法，一个一个遍历，但一定会超时的。下面介绍两种方法，第一种的时间复杂度为O(NlogN)，但是仍然超时，第二种为O(N)。</p>
<h2 id="分治法"><a href="#分治法" class="headerlink" title="分治法"></a>分治法</h2><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>对于给定数组，可以把该数组分成两部分，左半部分和右半部分。对于该数组的最大的子串和，要么出现在左半部分，要么出现在右半部分，要么出现在左半部分和右半部分的交叉部分。对于交叉部分，一定是从中间向两侧扩散的，写代码的时候要注意这一点。<br><a id="more"></a></p>
<h3 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> maxSum(nums, <span class="number">0</span>, nums.length-<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSum</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (left == right) <span class="keyword">return</span> nums[left];    </div><div class="line">        </div><div class="line">        <span class="keyword">int</span> center = (left + right) / <span class="number">2</span>;</div><div class="line">        <span class="keyword">int</span> maxLeft = maxSum(nums, left, center);</div><div class="line">        <span class="keyword">int</span> maxRight = maxSum(nums, center+<span class="number">1</span>, right);</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> maxLeftBorder = nums[center], leftBorder = nums[center];        </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = center-<span class="number">1</span>; i &gt;= left; i--) &#123;</div><div class="line">            leftBorder += nums[i];</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> (leftBorder &gt; maxLeftBorder) maxLeftBorder = leftBorder;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> maxRightBorder = nums[center+<span class="number">1</span>], rightBorder = nums[center+<span class="number">1</span>];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = center+<span class="number">2</span>; j &lt;= right; j++) &#123;</div><div class="line">            rightBorder += nums[j];</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> (rightBorder &gt; maxRightBorder) maxRightBorder = rightBorder;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> Math.max(Math.max(maxLeft, maxRight), maxLeftBorder+maxRightBorder);    </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>循环的结束条件只判断了left==right的情况，left&gt;right的情况是不会出现的，利用反证法可以轻易证明，此处不展开叙述。</p>
<p>但是提交后仍然超时了。善良的leetcode在结果页面上告诉了我202个Testcase都通过了，代码本身是正确的，只是用时过长。</p>
<h2 id="一次扫描法"><a href="#一次扫描法" class="headerlink" title="一次扫描法"></a>一次扫描法</h2><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>因为leetcode对题目做了限定，返回的最大子串和所在的子串至少包含一个数，换言之数组中所有数都是负数的情况下，最大子串和必然是最大的那个负数，这就是情况1。<br>情况2：当所有数都是非负数，最大子串和就是数组中所有数的和。<br>情况3：当输入的数组有正数有负数时，令max=0，temp=0，max表示最大子串和，因为数组中有正数，所以max的值会在循环中被改变，不会一直保持为0。temp表示当前的子串和。<br>令指针i初始时指向数组第一个元素，i每次向后移动一位。对于i当前指向的元素，把它加到temp里。然后判断temp和max的大小，决定是否把temp的值赋给max。如果<code>temp&lt;max</code>时，还要判断temp的值是否小于0，如果小于0，则temp=0，表示舍弃temp所表示的子串，从该子串的下一个数开始求最大子串和，此处可以用反证法证明如下：<br>若temp表示从下标m到n的子串和，假设我们最终求得的最大子串和MAX是从下标m到n+p的子串的和。那么<code>MAX=temp+nums[n+1]+...+nums[n+p]</code>，而又因为<code>temp&lt;0</code>，则存在<code>REAL_MAX=nums[n+1]+...+nums[n+p]&gt;MAX</code>，这与假设矛盾。</p>
<p>情况2和情况3可以一起处理，情况1需要特殊处理。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> max = <span class="number">0</span>, temp = <span class="number">0</span>;</div><div class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</div><div class="line">            temp += nums[i];</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> (temp &gt; max) max = temp;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (temp &lt; <span class="number">0</span>) temp = <span class="number">0</span>;</div><div class="line">            </div><div class="line">            <span class="comment">//如果数组中存在非负数，且flag为false的话，</span></div><div class="line">            <span class="comment">//flag置为true表示数组中存在非负数</span></div><div class="line">            <span class="keyword">if</span> (!flag &amp;&amp; nums[i] &gt;= <span class="number">0</span>) flag = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (flag) <span class="keyword">return</span> max;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">int</span> N_max = nums[<span class="number">0</span>];</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</div><div class="line">                <span class="keyword">if</span> (nums[i] &gt; N_max) N_max = nums[i];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> N_max;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>提交后代码AC了，运行速度排名在67%左右。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定数组，求数组中的所有子串中最大的子串和。&lt;br&gt;很容易就能想到O(n^3)的算法，一个一个遍历，但一定会超时的。下面介绍两种方法，第一种的时间复杂度为O(NlogN)，但是仍然超时，第二种为O(N)。&lt;/p&gt;
&lt;h2 id=&quot;分治法&quot;&gt;&lt;a href=&quot;#分治法&quot; class=&quot;headerlink&quot; title=&quot;分治法&quot;&gt;&lt;/a&gt;分治法&lt;/h2&gt;&lt;h3 id=&quot;解题思路&quot;&gt;&lt;a href=&quot;#解题思路&quot; class=&quot;headerlink&quot; title=&quot;解题思路&quot;&gt;&lt;/a&gt;解题思路&lt;/h3&gt;&lt;p&gt;对于给定数组，可以把该数组分成两部分，左半部分和右半部分。对于该数组的最大的子串和，要么出现在左半部分，要么出现在右半部分，要么出现在左半部分和右半部分的交叉部分。对于交叉部分，一定是从中间向两侧扩散的，写代码的时候要注意这一点。&lt;br&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://blade6.top/categories/ACM/"/>
    
    
      <category term="Java" scheme="http://blade6.top/tags/Java/"/>
    
      <category term="leetcode" scheme="http://blade6.top/tags/leetcode/"/>
    
      <category term="Array" scheme="http://blade6.top/tags/Array/"/>
    
      <category term="分治" scheme="http://blade6.top/tags/%E5%88%86%E6%B2%BB/"/>
    
  </entry>
  
  <entry>
    <title>Generate Parentheses</title>
    <link href="http://blade6.top/posts/c59bb016/"/>
    <id>http://blade6.top/posts/c59bb016/</id>
    <published>2017-04-23T02:38:48.778Z</published>
    <updated>2017-04-24T08:39:10.818Z</updated>
    
    <content type="html"><![CDATA[<p>给定n，求n对括号可以生成的括号嵌套种数。这道题其实不难，很快就能想出解题思路。</p>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>对于n，记录的是括号的数目，本质上也是左括号和右括号的出现次数。假设t记录左括号的剩余出现次数，cur记录当前未匹配的左括号个数，str记录单次结果，str的长度是固定的，必然是2n。<br>首先要初始化：t=n，cur=0，str=””。当循环开始时，第1个符号必须是左括号，然后t-=1，表示左括号的剩余出现次数变成n-1了。同时str+=”(“，cur+=1，表示str中有1个左括号未匹配。<br><a id="more"></a><br>对于第i个符号：<br>如果t==0且cur==0，说明循环结束，将str加到结果集中。<br>如果t==0，说明左括号的剩余出现次数已用完，那么第i个符号只能取右括号，同时cur-=1；<br>如果cur==0，说明str中不存在未匹配的左括号，那么第i个符号只能取左括号，同时t-=1；<br>如果t&gt;0且cur&gt;0，则第i个符号可以是左括号也可以是右括号，如果第i个符号取左括号，那么t-=1，cur+=1，如果第i个符号取右括号，那么cur-=1。<br><strong>注意：因为对于第i个符号，当t&gt;0且cur&gt;0的时候，第i个符号可以有两种取值，所以使用递归会取得事半功倍的效果。</strong></p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">generateParenthesis</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        List&lt;String&gt; l = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">        test(l, n, <span class="number">0</span>, <span class="string">""</span>);</div><div class="line">        <span class="keyword">return</span> l;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(List&lt;String&gt; l, <span class="keyword">int</span> t, <span class="keyword">int</span> cur, String str)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(t==<span class="number">0</span> &amp;&amp; cur == <span class="number">0</span>)&#123;</div><div class="line">            l.add(str);</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(cur == <span class="number">0</span>)&#123;</div><div class="line">            test(l, t-<span class="number">1</span>, cur+<span class="number">1</span>, str+<span class="string">"("</span>);</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(t==<span class="number">0</span>)&#123;</div><div class="line">            test(l, t, cur-<span class="number">1</span>, str+<span class="string">")"</span>);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            test(l, t-<span class="number">1</span>, cur+<span class="number">1</span>, str+<span class="string">"("</span>);</div><div class="line">            test(l, t, cur-<span class="number">1</span>, str+<span class="string">")"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一次AC通过，运行速度排名39%。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定n，求n对括号可以生成的括号嵌套种数。这道题其实不难，很快就能想出解题思路。&lt;/p&gt;
&lt;h3 id=&quot;解题思路&quot;&gt;&lt;a href=&quot;#解题思路&quot; class=&quot;headerlink&quot; title=&quot;解题思路&quot;&gt;&lt;/a&gt;解题思路&lt;/h3&gt;&lt;p&gt;对于n，记录的是括号的数目，本质上也是左括号和右括号的出现次数。假设t记录左括号的剩余出现次数，cur记录当前未匹配的左括号个数，str记录单次结果，str的长度是固定的，必然是2n。&lt;br&gt;首先要初始化：t=n，cur=0，str=””。当循环开始时，第1个符号必须是左括号，然后t-=1，表示左括号的剩余出现次数变成n-1了。同时str+=”(“，cur+=1，表示str中有1个左括号未匹配。&lt;br&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://blade6.top/categories/ACM/"/>
    
    
      <category term="Java" scheme="http://blade6.top/tags/Java/"/>
    
      <category term="leetcode" scheme="http://blade6.top/tags/leetcode/"/>
    
      <category term="分治" scheme="http://blade6.top/tags/%E5%88%86%E6%B2%BB/"/>
    
  </entry>
  
  <entry>
    <title>Merge Two Sorted Lists</title>
    <link href="http://blade6.top/posts/a72883c7/"/>
    <id>http://blade6.top/posts/a72883c7/</id>
    <published>2017-04-22T07:20:51.174Z</published>
    <updated>2017-04-24T08:37:24.508Z</updated>
    
    <content type="html"><![CDATA[<p>合并两个有序链表。因为是链表，所以可以写出空间复杂度为O(1)的算法。</p>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>对于这两条链表，给定指针l1和l2，分别指向两条链表的结点。给定指针result，指向结果链表的尾结点。每次比较l1指向结点和l2指向结点的值的大小，然后把小的那个结点插入到结果链表的尾部，同时使存储该结点的指针指向其下一个结点，结果链表的指针result指向下一个结点。注意result每次都指向结果链表的尾结点，而不是尾结点的next部，否则会导致空指针错误。<br><a id="more"></a><br>操作如图：<br>橙色为上一步，蓝色为下一步。</p>
<p><img src="http://oncw676n6.bkt.clouddn.com/%E5%9B%BE%E7%89%871.png" alt="解题思路的图解"></p>
<p>代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeTwoLists</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(l1 == <span class="keyword">null</span>) <span class="keyword">return</span> l2;</div><div class="line">        <span class="keyword">if</span>(l2 == <span class="keyword">null</span>) <span class="keyword">return</span> l1;</div><div class="line">        </div><div class="line">        <span class="comment">//对于两个链表的第一个结点的比较单独写出来，</span></div><div class="line">        <span class="comment">//因为需要初始化result_head，result_head指向结果链表的第一个结点</span></div><div class="line">        ListNode result = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span>(l1.val &lt;= l2.val) &#123;</div><div class="line">            result = l1;</div><div class="line">            l1 = l1.next;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            result = l2;</div><div class="line">            l2 = l2.next;</div><div class="line">        &#125;</div><div class="line">        ListNode result_head = result;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</div><div class="line">            <span class="keyword">if</span>(l1 == <span class="keyword">null</span>) &#123;</div><div class="line">                result.next = l2;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (l2 == <span class="keyword">null</span>) &#123;</div><div class="line">                result.next = l1;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">if</span>(l1.val &lt;= l2.val) &#123;</div><div class="line">                    result.next = l1;</div><div class="line">                    l1 = l1.next;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    result.next = l2;</div><div class="line">                    l2 = l2.next;</div><div class="line">                &#125;</div><div class="line">                result = result.next;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> result_head;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>提交后AC，运行速度排名60%左右。</p>
<p>还可以使用分治法，可以写出简短易懂的代码。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeTwoLists</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(l1 == <span class="keyword">null</span>) <span class="keyword">return</span> l2;</div><div class="line">        <span class="keyword">if</span>(l2 == <span class="keyword">null</span>) <span class="keyword">return</span> l1;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(l1.val &lt;= l2.val) &#123;</div><div class="line">            l1.next = mergeTwoLists(l1.next, l2);</div><div class="line">            <span class="keyword">return</span> l1;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            l2.next = mergeTwoLists(l1, l2.next);</div><div class="line">            <span class="keyword">return</span> l2;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;合并两个有序链表。因为是链表，所以可以写出空间复杂度为O(1)的算法。&lt;/p&gt;
&lt;h3 id=&quot;解题思路&quot;&gt;&lt;a href=&quot;#解题思路&quot; class=&quot;headerlink&quot; title=&quot;解题思路&quot;&gt;&lt;/a&gt;解题思路&lt;/h3&gt;&lt;p&gt;对于这两条链表，给定指针l1和l2，分别指向两条链表的结点。给定指针result，指向结果链表的尾结点。每次比较l1指向结点和l2指向结点的值的大小，然后把小的那个结点插入到结果链表的尾部，同时使存储该结点的指针指向其下一个结点，结果链表的指针result指向下一个结点。注意result每次都指向结果链表的尾结点，而不是尾结点的next部，否则会导致空指针错误。&lt;br&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://blade6.top/categories/ACM/"/>
    
    
      <category term="Java" scheme="http://blade6.top/tags/Java/"/>
    
      <category term="leetcode" scheme="http://blade6.top/tags/leetcode/"/>
    
      <category term="分治" scheme="http://blade6.top/tags/%E5%88%86%E6%B2%BB/"/>
    
      <category term="List" scheme="http://blade6.top/tags/List/"/>
    
  </entry>
  
  <entry>
    <title>Pow(x,n)</title>
    <link href="http://blade6.top/posts/bbe3cb45/"/>
    <id>http://blade6.top/posts/bbe3cb45/</id>
    <published>2017-04-22T03:35:30.327Z</published>
    <updated>2017-04-28T09:33:15.148Z</updated>
    
    <content type="html"><![CDATA[<p>这道题是实现内置函数pow(x,n)。思路没什么复杂的，我很快就想出了第一个答案：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">myPow</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1.0</span>;</div><div class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> x;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> m = n;</div><div class="line">        <span class="keyword">if</span>(n &lt; <span class="number">0</span>) m = -n;</div><div class="line">        <span class="keyword">double</span> result = x;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(m &gt; <span class="number">1</span>) &#123;</div><div class="line">            result *= x;</div><div class="line">            --m;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(n &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span> / result;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>然后也很快地死在以下TestCase：<br>0.00001<br>2147483647<br>死亡原因：超时。</p>
<p>超时的原因很简单，我的算法是一个O(n)级别的算法。而事实上存在O(log n)级别的算法。所以，分治法出场了。</p>
<h3 id="解题思想"><a href="#解题思想" class="headerlink" title="解题思想"></a>解题思想</h3><p>对于x^n，通常可以这样做：<br>如果n是奇数，那么x^n等价于<code>(x*x)^(n/2)*x</code>;<br>如果n是偶数，那么x^n等价于<code>(x*x)^(n/2)</code>.</p>
<p>有了思想，很快就写出了代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">myPow</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1.0</span>;</div><div class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> x;</div><div class="line">       </div><div class="line">        <span class="keyword">if</span>(n &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span> / My_pow(x, -n);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">return</span> My_pow(x, n);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">My_pow</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">int</span> m)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(m == <span class="number">1</span>) <span class="keyword">return</span> x;</div><div class="line">        <span class="keyword">if</span>(m % <span class="number">2</span> == <span class="number">0</span>) <span class="keyword">return</span> My_pow(x*x, m/<span class="number">2</span>);</div><div class="line">        <span class="keyword">return</span> My_pow(x*x, m/<span class="number">2</span>) * x;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>提交后死在以下TestCase上：<br>1.00000<br>-2147483648<br>死亡原因：运行时错误（栈溢出）<br>P.S.仔细一看，就能发现错误。但当时我没有意识到。后来我修改了My_pow()方法，在第一行加上了<code>if (m == 0) return 1.0;</code>，提交后就AC了，运行速度排名70%左右。</p>
<p>当时看到栈溢出的错误时，我第一感觉是使用了递归导致的，于是试图实现使用循环代替递归，但是以失败告终。经过在网上搜索，对比别人的代码，我修改代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">myPow</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1.0</span>;</div><div class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> x;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(n == Integer.MIN_VALUE) <span class="keyword">return</span> <span class="number">1</span> / (My_pow(x, Integer.MAX_VALUE) * x);</div><div class="line">        <span class="keyword">if</span>(n &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span> / My_pow(x, -n);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">return</span> My_pow(x, n);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">My_pow</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">int</span> m)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(m == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1.0</span>;</div><div class="line">        <span class="keyword">if</span>(m == <span class="number">1</span>) <span class="keyword">return</span> x;</div><div class="line">        <span class="keyword">double</span> half = My_pow(x, m/<span class="number">2</span>);</div><div class="line">        <span class="keyword">return</span> half * half * My_pow(x, m%<span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>提交后AC了，运行速度排名44%。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这道题是实现内置函数pow(x,n)。思路没什么复杂的，我很快就想出了第一个答案：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;myPow&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; x, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (n == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (n == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; m = n;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(n &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) m = -n;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; result = x;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(m &amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            result *= x;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            --m;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(n &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; / result;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://blade6.top/categories/ACM/"/>
    
    
      <category term="Java" scheme="http://blade6.top/tags/Java/"/>
    
      <category term="leetcode" scheme="http://blade6.top/tags/leetcode/"/>
    
      <category term="分治" scheme="http://blade6.top/tags/%E5%88%86%E6%B2%BB/"/>
    
  </entry>
  
  <entry>
    <title>ZigZag Conversion</title>
    <link href="http://blade6.top/posts/6d08e17c/"/>
    <id>http://blade6.top/posts/6d08e17c/</id>
    <published>2017-04-20T16:10:43.434Z</published>
    <updated>2017-04-24T08:34:44.096Z</updated>
    
    <content type="html"><![CDATA[<p>一开始看到题目的时候，我是搞不清楚情况的。主要原因是不明白ZigZag的意思。</p>
<h3 id="ZigZag"><a href="#ZigZag" class="headerlink" title="ZigZag"></a>ZigZag</h3><p>比如有数字序列0,1,2,3，…，12，按照ZigZag排序如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">0   4   8     12</div><div class="line">1 3 5 7 9  11</div><div class="line">2   6   10</div></pre></td></tr></table></figure></p>
<p>ZigZag的含义就是锯齿形的，之字形的，Z字形的。<br><a id="more"></a><br>现在问题明白了，给定字符串s和行数numRows，把字符串按照ZigZag排列，然后逐行按列读取，形成一个新的字符串，返回这个字符串。</p>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>这道题其实就是找规律。找到规律，代码写起来也很快。那么规律是什么呢？通过实例来捋一捋：<br>对于给定的字符串s，它的每一个字符都应该有一个下标，这样就会形成一个下标序列，从0到s.length()-1。假设我们现在有0到20这21个数，是某个字符窜的下标序列。如果给定的numRows=6，那么把这个字符串按照ZigZag排列应该如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">0         10                  20</div><div class="line">1       9   11              19</div><div class="line">2     8       12          18</div><div class="line">3   7           13      17</div><div class="line">4 6               14  16</div><div class="line">5                   15</div></pre></td></tr></table></figure></p>
<p>规律如下：<br>对于每一行的首个元素，其实是很好确定的，就是从0到numRows-1;<br>对于首行和末行，每一个数都恰好是其前一个数加上2<em>numRows-2;<br>对于中间行，分成奇数位元素和偶数位元素处理，对于奇数位元素，每一个数都恰好是其前一个数加上2</em>numRows-2，偶数位元素也是如此。</p>
<p>思路捋顺了，规律找到了，我们开始写代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">convert</span><span class="params">(String s, <span class="keyword">int</span> numRows)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> length = s.length();</div><div class="line">        <span class="keyword">if</span> (length == <span class="number">1</span> || numRows == <span class="number">1</span> || numRows &gt;= length) <span class="keyword">return</span> s;</div><div class="line">        </div><div class="line">        StringBuilder result = <span class="keyword">new</span> StringBuilder();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numRows; i++) &#123;</div><div class="line">            result.append(s.charAt(i));</div><div class="line">            <span class="keyword">if</span> (i == <span class="number">0</span> || i == numRows - <span class="number">1</span>) &#123;</div><div class="line">                <span class="keyword">int</span> j = i + <span class="number">2</span> * numRows - <span class="number">2</span>;</div><div class="line">                <span class="keyword">while</span> (j &lt; length) &#123;</div><div class="line">                    result.append(s.charAt(j));</div><div class="line">                    j += <span class="number">2</span> * numRows - <span class="number">2</span>;</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">//int Odd = (numRows - 1) + [(numRows -1) - i]</span></div><div class="line">                <span class="keyword">int</span> Odd = <span class="number">2</span> * numRows - <span class="number">2</span> - i;</div><div class="line">                <span class="keyword">if</span> (Odd &lt; length) result.append(s.charAt(Odd));</div><div class="line">                <span class="keyword">int</span> Even = i + <span class="number">2</span> * numRows - <span class="number">2</span>;</div><div class="line">                <span class="keyword">if</span> (Even &lt; length) result.append(s.charAt(Even));</div><div class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">                    Odd += <span class="number">2</span> * numRows - <span class="number">2</span>;</div><div class="line">                    <span class="keyword">if</span> (Odd &lt; length) result.append(s.charAt(Odd));</div><div class="line">                    <span class="keyword">else</span> <span class="keyword">break</span>;</div><div class="line">                    Even += <span class="number">2</span> * numRows - <span class="number">2</span>;</div><div class="line">                    <span class="keyword">if</span> (Even &lt; length) result.append(s.charAt(Even));</div><div class="line">                    <span class="keyword">else</span> <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> result.toString();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>需要注意的地方如下：<br>1.对于字符串s，考虑s的长度小于numRows的情况。<br>2.对于每次处理到的下标，除非当前下标是每一行的首个元素，否则需要判断该下标是否越界。<br>3.中间行的奇数位元素的首个元素需要结合当前行进行判断。</p>
<p>提交代码，AC，运行时间53ms，排名84%。这次运气不错，一次运行通过。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一开始看到题目的时候，我是搞不清楚情况的。主要原因是不明白ZigZag的意思。&lt;/p&gt;
&lt;h3 id=&quot;ZigZag&quot;&gt;&lt;a href=&quot;#ZigZag&quot; class=&quot;headerlink&quot; title=&quot;ZigZag&quot;&gt;&lt;/a&gt;ZigZag&lt;/h3&gt;&lt;p&gt;比如有数字序列0,1,2,3，…，12，按照ZigZag排序如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;0   4   8     12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;1 3 5 7 9  11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2   6   10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;ZigZag的含义就是锯齿形的，之字形的，Z字形的。&lt;br&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://blade6.top/categories/ACM/"/>
    
    
      <category term="Java" scheme="http://blade6.top/tags/Java/"/>
    
      <category term="leetcode" scheme="http://blade6.top/tags/leetcode/"/>
    
      <category term="String" scheme="http://blade6.top/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>Median of Two Sorted Arrays</title>
    <link href="http://blade6.top/posts/757ce68a/"/>
    <id>http://blade6.top/posts/757ce68a/</id>
    <published>2017-04-19T13:04:14.632Z</published>
    <updated>2017-04-24T08:35:43.366Z</updated>
    
    <content type="html"><![CDATA[<p>要求出两个有序数组的中位数，试想，如果我们能够求出两个有序数组合并后的第k个数，那么中位数只是一种特殊情况，问题迎刃而解。<br>题目要求时间复杂度要在O(log(m+n))，通常出现对数，应该考虑分治法。</p>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>求解两个有序数组的第k个数：<br>假设给定有序数组A和B,A的前指针aLow和后指针aHigh，B的前指针bLow和bHigh，以及k。求出A数组区间[aLow,aHigh]的中间数A[aMid]，B也做同样操作，同时求出A[aLow,aMid]和B[bLow,bMid]一共有多少个数并赋给HalfPart<br><strong>注意是闭区间，所以A[aMid]和B[bMid]都包含在HalfPart里面，HalfPart=A[aLow,aMid]+B[bLow,bMid]</strong>。<br><a id="more"></a></p>
<h4 id="然后判断A-aMid-和B-bMid-的大小。"><a href="#然后判断A-aMid-和B-bMid-的大小。" class="headerlink" title="然后判断A[aMid]和B[bMid]的大小。"></a>然后判断A[aMid]和B[bMid]的大小。</h4><p>如果A[aMid]==B[bMid]，那么判断HalfPart和k的大小。HalfPart&gt;k说明第k个数应该出现在A[aLow,aMid]和B[bLow,bMid]所包含的数里，否则出现在A[aMid+1,aHigh]和B[bMid+1,bHigh]所包含的数里。<br>如果A[aMid]!=B[bMid]，那么也是同样判断HalfPart和k的大小。当A[aMid]<b[bmid]时，如果halfpart>k，则说明第k个数不会出现在B[bMid,bHigh]里面，但无法判断第k个数在A中的出现情况。理由如下：<br>如果<code>A[aMid]&lt;B[bMid]&amp;&amp;HalfPart&gt;k</code>，那么我们可以增加一个变量x=aMid，令x自增，直至A[x]==B[bMid]，假设把这两个有序数组进行合并的话，B[bMid]应该出现在x+bMid这个位置上,因为HalfPart&gt;k，同时又有x&gt;aMid，则易知<code>x+bMid=A[aLow,x]+B[bLow,bMid]&gt;HalfPart&gt;k</code>，则B[bMid]是一个合并排序后的第k+u个数（u是未知数），而我们要求的是第k个数，所以第k个数不会出现在B[bMid,bHigh]里面。第k个数有可能出现在A[aLow,x]和B[bLow,bMid-1]这个范围里面。<br>如果HalfPart&lt;=k，则说明第k个数不会出现在A[aLow,aMid]里面，但无法判断在B中的出现情况。理由类似上述。<br>P.S.注意当HalfPart&gt;k时，舍弃了B[bLow,bHigh]，舍弃的是高下标的数据，不会影响我们查找第k个数。<br>但是当HalfPart&lt;=k时，舍弃的是A[aLow,aMid]，这实际修正了我们的查找目标，不再是第k个数，而是第k-(aMid-aLow+1)个数。<br>对于A[aMid]&gt;B[bMid]的情况，相当于互换了A和B的位置，思路还是一样。</b[bmid]时，如果halfpart></p>
<p>分析完毕，可以开始写代码了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> length = nums1.length + nums2.length;</div><div class="line">        <span class="keyword">if</span> (length % <span class="number">2</span> == <span class="number">0</span>) <span class="keyword">return</span> (findKth(nums1, nums2, length / <span class="number">2</span>)</div><div class="line">                + findKth(nums1, nums2, length / <span class="number">2</span> + <span class="number">1</span>)) / <span class="number">2.0</span>;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">return</span> findKth(nums1, nums2, (length + <span class="number">1</span>) / <span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/*</span></div><div class="line">     * find the k num in two sorted arrays </div><div class="line">     * recursion</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findK</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span> a_low, <span class="keyword">int</span> a_high, <span class="keyword">int</span>[] B, <span class="keyword">int</span> b_low, <span class="keyword">int</span> b_high, <span class="keyword">int</span> k)</span> </span>&#123;    </div><div class="line">        <span class="keyword">if</span> (a_low &gt; a_high) <span class="keyword">return</span> B[b_low + k - <span class="number">1</span>];</div><div class="line">        <span class="keyword">if</span> (b_low &gt; b_high) <span class="keyword">return</span> A[a_low + k - <span class="number">1</span>];</div><div class="line">        </div><div class="line">        <span class="comment">//if (a_high == a_low &amp;&amp; b_high == b_low &amp;&amp; A[a_low] == B[b_low]) return A[a_low]; </span></div><div class="line">        </div><div class="line">        <span class="keyword">int</span> a_mid = a_low + (a_high - a_low) / <span class="number">2</span>;</div><div class="line">        <span class="keyword">int</span> b_mid = b_low + (b_high - b_low) / <span class="number">2</span>;</div><div class="line">        <span class="keyword">int</span> half_part = a_mid - a_low + b_mid - b_low + <span class="number">2</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (A[a_mid] == B[b_mid]) &#123;</div><div class="line">            <span class="keyword">if</span> (half_part &lt; k) <span class="keyword">return</span> findK(A, a_mid + <span class="number">1</span>, a_high, B, b_mid + <span class="number">1</span>, b_high, k - half_part);</div><div class="line">            <span class="keyword">else</span> <span class="keyword">return</span> findK(A, a_low, a_mid, B, b_low, b_mid, k);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (A[a_mid] &lt; B[b_mid] ) &#123;</div><div class="line">            <span class="keyword">if</span> (half_part &lt;= k) <span class="keyword">return</span> findK(A, a_mid + <span class="number">1</span>, a_high, B, b_low, b_high, k - (a_mid - a_low + <span class="number">1</span>));</div><div class="line">            <span class="keyword">else</span> <span class="keyword">return</span> findK(A, a_low, a_high, B, b_low, b_mid - <span class="number">1</span>, k);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span> (half_part &lt;= k) <span class="keyword">return</span> findK(A, a_low, a_high, B, b_mid + <span class="number">1</span>, b_high, k - (b_mid - b_low + <span class="number">1</span>));</div><div class="line">            <span class="keyword">else</span> <span class="keyword">return</span> findK(A, a_low, a_mid - <span class="number">1</span>, B, b_low, b_high, k);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行代码死在了以下TestCase：<br>[1]<br>[1]<br>死亡原因：运行错误，经本地调试发现是栈溢出。实际上是由于代码第26行造成的，死循环最终导致栈溢出。<br>修正方法：将第18行的注释去掉。当两个数组都只剩一个数，且两数组的剩下的数还是同一个数时，则返回这个数。<br>修正后AC通过，运行速度排名45%。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;要求出两个有序数组的中位数，试想，如果我们能够求出两个有序数组合并后的第k个数，那么中位数只是一种特殊情况，问题迎刃而解。&lt;br&gt;题目要求时间复杂度要在O(log(m+n))，通常出现对数，应该考虑分治法。&lt;/p&gt;
&lt;h3 id=&quot;解题思路&quot;&gt;&lt;a href=&quot;#解题思路&quot; class=&quot;headerlink&quot; title=&quot;解题思路&quot;&gt;&lt;/a&gt;解题思路&lt;/h3&gt;&lt;p&gt;求解两个有序数组的第k个数：&lt;br&gt;假设给定有序数组A和B,A的前指针aLow和后指针aHigh，B的前指针bLow和bHigh，以及k。求出A数组区间[aLow,aHigh]的中间数A[aMid]，B也做同样操作，同时求出A[aLow,aMid]和B[bLow,bMid]一共有多少个数并赋给HalfPart&lt;br&gt;&lt;strong&gt;注意是闭区间，所以A[aMid]和B[bMid]都包含在HalfPart里面，HalfPart=A[aLow,aMid]+B[bLow,bMid]&lt;/strong&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://blade6.top/categories/ACM/"/>
    
    
      <category term="Java" scheme="http://blade6.top/tags/Java/"/>
    
      <category term="leetcode" scheme="http://blade6.top/tags/leetcode/"/>
    
      <category term="Array" scheme="http://blade6.top/tags/Array/"/>
    
      <category term="分治" scheme="http://blade6.top/tags/%E5%88%86%E6%B2%BB/"/>
    
  </entry>
  
  <entry>
    <title>3Sum</title>
    <link href="http://blade6.top/posts/92e6a03a/"/>
    <id>http://blade6.top/posts/92e6a03a/</id>
    <published>2017-04-19T06:20:21.975Z</published>
    <updated>2017-04-24T08:39:58.107Z</updated>
    
    <content type="html"><![CDATA[<p>3数和为0问题，对于这个问题，网上一致认为，这个问题是两数和问题的升级版，最终能够优化到O(n^2)级别。</p>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>对于给定数组中的每个下标i，用前指针left指向其下一个数，后指针right指向数组最后的数。如果三个数的和为0，则判断结果是否已出现，如果出现过，不添加，否则添加到结果集。如果三数和小于0，则前指针指向后一个数，否则后指针指向前一个数。<br><a id="more"></a><br>根据解题思路，结合网上找到的别人的代码，我迅速地写出了第一个答案：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; threeSum(<span class="keyword">int</span>[] nums) &#123;</div><div class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        Arrays.sort(nums);</div><div class="line">        <span class="keyword">int</span> length = nums.length;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</div><div class="line">            <span class="keyword">int</span> left = i + <span class="number">1</span>;</div><div class="line">            <span class="keyword">int</span> right = length - <span class="number">1</span>;</div><div class="line">            <span class="keyword">while</span> (left &lt; right) &#123;</div><div class="line">                <span class="keyword">int</span> sum = nums[i] + nums[left] + nums[right];</div><div class="line">                <span class="keyword">if</span> (sum == <span class="number">0</span>) &#123;</div><div class="line">                    List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">                    list.add(nums[i]);</div><div class="line">                    list.add(nums[left]);</div><div class="line">                    list.add(nums[right]);</div><div class="line">                    <span class="keyword">if</span> (!Compare(result, list)) result.add(list);</div><div class="line">                    ++left;</div><div class="line">                    --right;</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; <span class="number">0</span>) &#123;</div><div class="line">                    ++left;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    --right;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">Compare</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; result, List&lt;Integer&gt; list)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; result.size(); i++) &#123;</div><div class="line">            List&lt;Integer&gt; test = result.get(i);</div><div class="line">            <span class="keyword">if</span> (test.contains(list.get(<span class="number">0</span>)) &amp;&amp; test.contains(list.get(<span class="number">1</span>)) </div><div class="line">                    &amp;&amp; test.contains(list.get(<span class="number">2</span>)))</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>通过Compare方法去重。然后死在了以下TestCase：<br>[-4,-2,1,-5,-4,-4,4,-2,0,4,0,-2,3,1,-5,0]<br>死亡原因：程序运行的结果集不正确，缺少[0,0,0]。<br>我自个分析，原因在于Compare方法有错误，如果有一个结果（比如：[-4,4,0]）包含0和两个相反数，则[0,0,0]无法添加到结果集。而且这个方法需要对结果集做一个遍历，效率太低。</p>
<p>自己的代码too young too naive,我决定模仿现成的代码，从网上找到一段代码，Submit：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; threeSum(<span class="keyword">int</span>[] nums) &#123;</div><div class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        Arrays.sort(nums);</div><div class="line">        <span class="keyword">int</span> length = nums.length;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</div><div class="line">            <span class="keyword">int</span> left = i + <span class="number">1</span>;</div><div class="line">            <span class="keyword">int</span> right = length - <span class="number">1</span>;</div><div class="line">            <span class="keyword">while</span> (left &lt; right) &#123;</div><div class="line">                <span class="keyword">int</span> sum = nums[i] + nums[left] + nums[right];</div><div class="line">                <span class="keyword">if</span> (sum == <span class="number">0</span>) &#123;</div><div class="line">                    List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">                    list.add(nums[i]);</div><div class="line">                    list.add(nums[left]);</div><div class="line">                    list.add(nums[right]);</div><div class="line">                    result.add(list);</div><div class="line">                    ++left;</div><div class="line">                    --right;</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; <span class="number">0</span>) &#123;</div><div class="line">                    ++left;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    --right;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        Set set = <span class="keyword">new</span> HashSet&lt;&gt;(result);</div><div class="line">        result = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;(set);</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这次313个TestCase，死在了第313个，也就是最后一个变态TestCase上：<br>[0,…,0]<br>0的出现次数有数千次之多。。<br>死亡原因：Time Limit Exceeded</p>
<p>这个方法的优点自然是利用集合的无序性来达到去重的效果。缺点则是这是一个事后弥补的方法。对于每次得出的结果，则将该结果加入结果集。最后再对结果集进行筛选去重。为什么不在加入前先去重？</p>
<p>根据这个TestCase，经过一番反省后，我想出两种办法来去重，第一种是采用过滤方法，第二种是备忘录方法。过滤方法的原理是，对于给定数组nums，如果其中有一个数出现了三次，那么除非这个数是0，否则第三次出现是没有意义的，因为我们最多也只会用到两个。举例来说：<br>[4,-2,-2,-2]<br>三数和为0的结果为[4,-2,-2]，-2在nums中出现了三次，其实出现两次就已经能得到结果[4,-2,-2]了，所以第三个-2是无效的。但0是可以出现三次的。对于任意数，出现了三次以上，就会有很多无效的数，这些数不会改变最终结果，但却会耗费大量运算时间。可以通过对nums进行过滤，剔除出现次数在3次以上的数，使得其出现次数减少至2次，0可以保持3次。<br>第二种方法是备忘录方法，因为最终求和是nums[i]+nums[left]+nums[right]，nums[left]+nums[right]其实存在重复运算的可能性，说不定能存起来，以便下次调用，减少运算次数，但这样一想，感觉方法要走向动态规划了。</p>
<p>这两个idea都是在对nums做过滤，避免因为某个数的出现次数过多而做无用功，在一定程度上能够减少运算次数。但是回到问题本身，问题里给出了一个TestCase：[-1, 0, 1, 2, -1, -4]，上面的两个idea最终都会使输入的数组变成类似这样的形式（任意一个数的出现次数不会超过2次，0可以出现3次）。但这不是最优的形式。因为即使是这样的形式，还是存在重复运算。比如有TestCase：[-4,-4,2,2]。根据解题思路，在整个程序跑的过程中，会出现以下情况：<br>1.当i=0,left=2,right=3时，得到结果[-4,2,2]，将其加入结果集；<br>2.当i=1,left=2,right=2时，得到结果[-4,2,2]，不加入结果集。<br>程序优化的目标就是使得情况2不要出现，因为情况2和情况1是一样的情况。<br>对于每个i，如果array[i]==array[i-1]，那么可以跳过array[i]，因为它的情况和它的前一个数的情况相同。相应地left、right也可以做同样处理。</p>
<p>最终可以编写出如下的代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; threeSum(<span class="keyword">int</span>[] nums) &#123;</div><div class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        Arrays.sort(nums);</div><div class="line">        <span class="keyword">int</span> length = nums.length;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length - <span class="number">2</span>; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) &#123;            </div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">int</span> left = i + <span class="number">1</span>;</div><div class="line">            <span class="keyword">int</span> right = length - <span class="number">1</span>;</div><div class="line">            <span class="keyword">while</span> (left &lt; right) &#123;</div><div class="line">                <span class="keyword">int</span> sum = nums[i] + nums[left] + nums[right];</div><div class="line">                <span class="keyword">if</span> (sum == <span class="number">0</span>) &#123;</div><div class="line">                    List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">                    list.add(nums[i]);</div><div class="line">                    list.add(nums[left]);</div><div class="line">                    list.add(nums[right]);</div><div class="line">                    result.add(list);</div><div class="line">                    ++left;</div><div class="line">                    --right;</div><div class="line">                    <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] == nums[left - <span class="number">1</span>]) left++;</div><div class="line">                    <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] == nums[right + <span class="number">1</span>]) right--;</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; <span class="number">0</span>) &#123;</div><div class="line">                    ++left;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    --right;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        Set set = <span class="keyword">new</span> HashSet&lt;&gt;(result);</div><div class="line">        result = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;(set);</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个代码被AC了，但是运算速度排在18%左右。仔细想想，我们可以知道实际上对i、left、right进行处理后，情况2是不会出现的，其实也不需要去重了。所以可以对代码做进一步的优化，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; threeSum(<span class="keyword">int</span>[] nums) &#123;</div><div class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        Arrays.sort(nums);</div><div class="line">        <span class="keyword">int</span> length = nums.length;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length - <span class="number">2</span>; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) &#123;            </div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">int</span> left = i + <span class="number">1</span>;</div><div class="line">            <span class="keyword">int</span> right = length - <span class="number">1</span>;</div><div class="line">            <span class="keyword">while</span> (left &lt; right) &#123;</div><div class="line">                <span class="keyword">int</span> sum = nums[i] + nums[left] + nums[right];</div><div class="line">                <span class="keyword">if</span> (sum == <span class="number">0</span>) &#123;</div><div class="line">                    result.add(Arrays.asList(nums[i], nums[left], nums[right]));</div><div class="line">                    ++left;</div><div class="line">                    --right;</div><div class="line">                    <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] == nums[left - <span class="number">1</span>]) left++;</div><div class="line">                    <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] == nums[right + <span class="number">1</span>]) right--;</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; <span class="number">0</span>) &#123;</div><div class="line">                    ++left;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    --right;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>提交之后自然是AC了，运算速度排名在65%。</p>
<p>回过头来看我的那两个idea，真是太稚嫩了。nums在排序后，去重其实是很容易做到的，通过指针的移动即可完成，我却还试图费大功夫来实现一个效果不见得好的去重，而忽视排序所带来的便利，一叶障目，不见泰山。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;3数和为0问题，对于这个问题，网上一致认为，这个问题是两数和问题的升级版，最终能够优化到O(n^2)级别。&lt;/p&gt;
&lt;h3 id=&quot;解题思路&quot;&gt;&lt;a href=&quot;#解题思路&quot; class=&quot;headerlink&quot; title=&quot;解题思路&quot;&gt;&lt;/a&gt;解题思路&lt;/h3&gt;&lt;p&gt;对于给定数组中的每个下标i，用前指针left指向其下一个数，后指针right指向数组最后的数。如果三个数的和为0，则判断结果是否已出现，如果出现过，不添加，否则添加到结果集。如果三数和小于0，则前指针指向后一个数，否则后指针指向前一个数。&lt;br&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://blade6.top/categories/ACM/"/>
    
    
      <category term="Java" scheme="http://blade6.top/tags/Java/"/>
    
      <category term="leetcode" scheme="http://blade6.top/tags/leetcode/"/>
    
      <category term="Array" scheme="http://blade6.top/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>Java方法参数——值传递</title>
    <link href="http://blade6.top/posts/c9c9e9c7/"/>
    <id>http://blade6.top/posts/c9c9e9c7/</id>
    <published>2017-04-17T16:17:41.355Z</published>
    <updated>2017-04-19T06:23:45.424Z</updated>
    
    <content type="html"><![CDATA[<p>Java中的方法的参数是值传递还是引用传递争论已久，实际上取决于我们怎么定义这两个名词，但如果仅从定义层面去分辨，还是很难有比较好的效果。本文通过实例讲解。</p>
<h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><p>这毫无疑问是值传递，换言之形参和实参互不影响。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</div><div class="line">        a=<span class="number">50</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> a=<span class="number">10</span>;</div><div class="line">        System.out.print(a + <span class="string">" "</span>);</div><div class="line">        change(a);</div><div class="line">        System.out.print(a);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出结果为：10 10<br><a id="more"></a></p>
<h3 id="引用类型（数组、对象）"><a href="#引用类型（数组、对象）" class="headerlink" title="引用类型（数组、对象）"></a>引用类型（数组、对象）</h3><p>注意形参实际上获得的是实参的一份拷贝，形参和实参都指向同一块内存地址。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> []a)</span></span>&#123;</div><div class="line">        a[<span class="number">0</span>]=<span class="number">50</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> []a=&#123;<span class="number">10</span>,<span class="number">20</span>&#125;;</div><div class="line">        System.out.print(a[<span class="number">0</span>] + <span class="string">" "</span>);</div><div class="line">        change(a);</div><div class="line">        System.out.print(a[<span class="number">0</span>]);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出结果为：10 50</p>
<h3 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h3><p>String类实际上和引用类型一样，但又有一些不同。不同的地方在于String类的内容不可变，这就是String类之所以特殊的地方。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(String s2)</span></span>&#123;</div><div class="line">        s2=<span class="string">"goodbye"</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        String s1=<span class="keyword">new</span> String(<span class="string">"hello"</span>);</div><div class="line">        System.out.print(s1 + <span class="string">" "</span>);</div><div class="line">        change(s1);</div><div class="line">        System.out.print(s1);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出结果为：hello hello<br>当调用change()方法时，把s1的值（”hello”的内存地址）传递过去，s2的值将会和s1的值相同；<br>当执行语句s2=”goodbye”时，将”goodbye”的内存地址赋给s2，此时s2的值和s1的值不再一致。<br>所以s1的内容没有发生变化。<br>P.S.而对于对象、数组，它们的数据域不一定是不可变对象，所以是可以通过使用形参改变的，于是出现了String类表现特殊的情况。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java中的方法的参数是值传递还是引用传递争论已久，实际上取决于我们怎么定义这两个名词，但如果仅从定义层面去分辨，还是很难有比较好的效果。本文通过实例讲解。&lt;/p&gt;
&lt;h3 id=&quot;基本数据类型&quot;&gt;&lt;a href=&quot;#基本数据类型&quot; class=&quot;headerlink&quot; title=&quot;基本数据类型&quot;&gt;&lt;/a&gt;基本数据类型&lt;/h3&gt;&lt;p&gt;这毫无疑问是值传递，换言之形参和实参互不影响。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Test1&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;change&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        a=&lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a=&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.print(a + &lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        change(a);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.print(a);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;输出结果为：10 10&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="http://blade6.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Java" scheme="http://blade6.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Longest Palindromic Substring</title>
    <link href="http://blade6.top/posts/8872b998/"/>
    <id>http://blade6.top/posts/8872b998/</id>
    <published>2017-03-28T16:03:28.126Z</published>
    <updated>2017-04-24T08:38:54.359Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题：给定字符串s，求出其最长回文子串。"><a href="#问题：给定字符串s，求出其最长回文子串。" class="headerlink" title="问题：给定字符串s，求出其最长回文子串。"></a>问题：给定字符串s，求出其最长回文子串。</h3><h4 id="方法一：动态规划。"><a href="#方法一：动态规划。" class="headerlink" title="方法一：动态规划。"></a>方法一：动态规划。</h4><p><strong>思想描述：</strong><br>假设 s[i][j] 表示字符串 s 下标从 i 到 j 的子串，如果该子串是回文子串，则令 dp[i][j] 为 true 。如果我们已经得到了最优解，这个最优解是 s[i][j] ，无疑 dp[i][j] = true 。而 dp[i][j]=true 实际上等价于 dp[i+1][j-1] = true &amp;&amp; s[i] == s[j] ，这就是<strong>推导式</strong>。<br>考虑 i+1 == j-1 ， i+1 == (j-1)-1 ，分别对应回文子串长度为1和为2的情况，这就是<strong>基准情况</strong>：<br>a. dp[i][i] = true<br>b. dp[i][i+1] = true if s[i] == s[i+1]<br><a id="more"></a></p>
<p>代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//Dynamic Programming</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(s.length()==<span class="number">0</span> || s.length() == <span class="number">1</span>) <span class="keyword">return</span> s;</div><div class="line">        <span class="keyword">int</span> length = s.length();</div><div class="line">        <span class="keyword">int</span> max = <span class="number">1</span>;</div><div class="line">        String result = <span class="string">""</span> +s.charAt(<span class="number">0</span>);</div><div class="line">        <span class="keyword">boolean</span>[][] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[length][length];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length;i++) dp[i][i] = <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length-<span class="number">1</span>;i++)&#123;</div><div class="line">            <span class="keyword">if</span>(s.charAt(i) == s.charAt(i+<span class="number">1</span>))&#123;</div><div class="line">                dp[i][i+<span class="number">1</span>] = <span class="keyword">true</span>;</div><div class="line">                <span class="keyword">if</span>(max != <span class="number">2</span>)&#123;</div><div class="line">                    max = <span class="number">2</span>;</div><div class="line">                    result = s.substring(i, i+<span class="number">2</span>);</div><div class="line">                &#125;                </div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">       </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = length - <span class="number">3</span>; i &gt;= <span class="number">0</span>; i--)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i+<span class="number">2</span>; j &lt; length; j++)&#123;</div><div class="line">                <span class="keyword">if</span>(dp[i+<span class="number">1</span>][j-<span class="number">1</span>] &amp;&amp; s.charAt(i) == s.charAt(j))&#123;</div><div class="line">                    dp[i][j] = <span class="keyword">true</span>;</div><div class="line">                    <span class="keyword">if</span>(j-i+<span class="number">1</span> &gt; max)&#123;</div><div class="line">                        max = j-i+<span class="number">1</span>;</div><div class="line">                        result = s.substring(i, j+<span class="number">1</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    dp[i][j] = <span class="keyword">false</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>需要注意的地方：实现动态规划时，需要注意边界，从哪里开始，到哪里结束。</p>
<h4 id="方法二：中心扩展。"><a href="#方法二：中心扩展。" class="headerlink" title="方法二：中心扩展。"></a>方法二：中心扩展。</h4><p><strong>思想描述：</strong><br>回文串是中心对称的，以 s[i] 为中心，用两个指针向两侧扩展判断是否相等可以得到以s[i]为中心的回文子串，对s的每个字符重复此操作，最终可以求得最大回文子串。</p>
<p>代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(s.length() == <span class="number">1</span> || s.length() == <span class="number">0</span>) <span class="keyword">return</span> s;</div><div class="line">        <span class="keyword">int</span> max = <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> ans;</div><div class="line">        String result = <span class="string">""</span> +s.charAt(<span class="number">0</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;s.length();i++)&#123;</div><div class="line">            ans = Math.max(PS_length(s, i-<span class="number">1</span>, i+<span class="number">1</span>), PS_length(s, i-<span class="number">1</span>, i));</div><div class="line">            <span class="keyword">if</span>(ans &gt; max)&#123;</div><div class="line">                max = ans;</div><div class="line">                <span class="keyword">if</span>(ans % <span class="number">2</span> == <span class="number">0</span>) result = s.substring(i-ans/<span class="number">2</span>, i+ans/<span class="number">2</span>);</div><div class="line">                <span class="keyword">else</span> result = s.substring(i-ans/<span class="number">2</span>, i+ans/<span class="number">2</span>+<span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//PS is short for Palindromic Substring</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">PS_length</span><span class="params">(String s, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</div><div class="line">        <span class="keyword">while</span>(i &gt;=<span class="number">0</span> &amp;&amp; j &lt; s.length())&#123;</div><div class="line">            <span class="keyword">if</span>(s.charAt(i)!=s.charAt(j)) <span class="keyword">break</span>;</div><div class="line">            --i;</div><div class="line">            ++j;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> j-i-<span class="number">1</span>;</div><div class="line">        <span class="comment">//return (j-i-1)+2</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>小trick：在求子串时，下标可以通过实例来明确。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;问题：给定字符串s，求出其最长回文子串。&quot;&gt;&lt;a href=&quot;#问题：给定字符串s，求出其最长回文子串。&quot; class=&quot;headerlink&quot; title=&quot;问题：给定字符串s，求出其最长回文子串。&quot;&gt;&lt;/a&gt;问题：给定字符串s，求出其最长回文子串。&lt;/h3&gt;&lt;h4 id=&quot;方法一：动态规划。&quot;&gt;&lt;a href=&quot;#方法一：动态规划。&quot; class=&quot;headerlink&quot; title=&quot;方法一：动态规划。&quot;&gt;&lt;/a&gt;方法一：动态规划。&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;思想描述：&lt;/strong&gt;&lt;br&gt;假设 s[i][j] 表示字符串 s 下标从 i 到 j 的子串，如果该子串是回文子串，则令 dp[i][j] 为 true 。如果我们已经得到了最优解，这个最优解是 s[i][j] ，无疑 dp[i][j] = true 。而 dp[i][j]=true 实际上等价于 dp[i+1][j-1] = true &amp;amp;&amp;amp; s[i] == s[j] ，这就是&lt;strong&gt;推导式&lt;/strong&gt;。&lt;br&gt;考虑 i+1 == j-1 ， i+1 == (j-1)-1 ，分别对应回文子串长度为1和为2的情况，这就是&lt;strong&gt;基准情况&lt;/strong&gt;：&lt;br&gt;a. dp[i][i] = true&lt;br&gt;b. dp[i][i+1] = true if s[i] == s[i+1]&lt;br&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://blade6.top/categories/ACM/"/>
    
    
      <category term="Java" scheme="http://blade6.top/tags/Java/"/>
    
      <category term="leetcode" scheme="http://blade6.top/tags/leetcode/"/>
    
      <category term="String" scheme="http://blade6.top/tags/String/"/>
    
      <category term="DP" scheme="http://blade6.top/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>回车符与换行符</title>
    <link href="http://blade6.top/posts/285ba2a7/"/>
    <id>http://blade6.top/posts/285ba2a7/</id>
    <published>2017-03-25T09:26:47.294Z</published>
    <updated>2017-04-24T08:40:17.721Z</updated>
    
    <content type="html"><![CDATA[<p>昨天晚上做NLP的时候，需要对文件做一些预处理。然后无意中发现一点小问题。通过用python和java分别对文件进行输出文本行数，发现不同。<br>输入文本文件:199801.txt<br>下面是Java实现的代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</div><div class="line">        java.io.File in_file = <span class="keyword">new</span> java.io.File(<span class="string">"199801.txt"</span>); </div><div class="line">        Scanner input = <span class="keyword">new</span> Scanner(in_file);</div><div class="line">        java.io.File out_file = <span class="keyword">new</span> java.io.File(<span class="string">"test.txt"</span>);</div><div class="line">        java.io.PrintWriter output = <span class="keyword">new</span> java.io.PrintWriter(out_file);</div><div class="line">        <span class="comment">//p_num表示文本总行数，q_num表示存在有效文字的行数</span></div><div class="line">        <span class="keyword">int</span> p_num = <span class="number">0</span>,q_num = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(input.hasNextLine())&#123;</div><div class="line">            String line = input.nextLine();</div><div class="line">            ++p_num;</div><div class="line">            <span class="keyword">if</span>(<span class="string">""</span>.equals(line))&#123;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            ++q_num;</div><div class="line">            output.println(q_num+<span class="string">" "</span>+line);                </div><div class="line">        &#125;</div><div class="line">        System.out.println(p_num+<span class="string">" "</span>+q_num);</div><div class="line">        input.close();</div><div class="line">        output.close();</div><div class="line">        System.out.println(<span class="string">"Done!"</span>);    </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>控制台上输出：<br>23064 19484<br>Done!<br>用Python实现的情况如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">f = open(<span class="string">'199801.txt'</span>,<span class="string">'r'</span>)</div><div class="line">g = open(<span class="string">'test1.txt'</span>,<span class="string">'w'</span>)</div><div class="line"></div><div class="line">p_num = <span class="number">0</span></div><div class="line">q_num = <span class="number">0</span></div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    line = f.readline()    </div><div class="line">    <span class="keyword">if</span> len(line):</div><div class="line">        p_num += <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> line != <span class="string">'\n'</span>:</div><div class="line">            <span class="keyword">continue</span>    </div><div class="line">        q_num += <span class="number">1</span></div><div class="line">        g.write(str(q_num)+<span class="string">" "</span>+line)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">break</span></div><div class="line"></div><div class="line">f.close()</div><div class="line">g.close()</div><div class="line"><span class="keyword">print</span> p_num,q_num</div></pre></td></tr></table></figure></p>
<p>控制台输出：<br>22722 19538</p>
<p>可以观察到总行数Java这边较大，有效行数Python这边较大。<br>我决定首先解决有效行数不一致的问题。因为我在代码中还写了把有效行写成文件的内容，所以我决定检查一下test.txt和text1.txt文件有什么不同。手动打开两个文件，通过粗略估计+二分搜索法，确定第一次输出不同在第341行。<br>(P.S.有效行是指该行中存在文字。)<br>text.txt line341:</p>
<blockquote>
<p>341 19980101-07-007-001/m  细语/n  （/w  中国画/n  ）/w </p>
</blockquote>
<p>tex1.txt line341:</p>
<blockquote>
<p>341 </p>
</blockquote>
<p>也就是text1.txt的341行实际上不是有效行，说明Python代码中判断是否是有效行的逻辑有错误。于是我认为输入的文本文件中可能混有回车符和换行符。<br>（P.S.这里考虑到文章的整体的流畅性，省略了很多细节。实际上最初我认为问题出在Java，因为我引入了C++语言，统计文本行数的结果和Python是一致的。当时我认为问题出在Java代码中的input.nextLine()处，所以搜索了很多关于这个函数返回值的问题，知道了nextLine()会吞掉换行符。然后通过百度换行符，我又了解到了回车符这个概念，其实以前学过，忘记了。。）<br>于是我对Python代码稍加修改，增加在原代码13行和14行之间:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> q_num == <span class="number">341</span>:</div><div class="line">    <span class="keyword">print</span> len(line)</div><div class="line">    <span class="keyword">if</span> line == <span class="string">'\r\n'</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'bingo'</span></div></pre></td></tr></table></figure></p>
<p>控制台显示：</p>
<blockquote>
<p>2<br>bingo<br>22722 19538</p>
</blockquote>
<p>于是判断出问题的关键在于’\r’和’\n’。于是我对Python代码进行了再次修改：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">f = open(<span class="string">'199801.txt'</span>,<span class="string">'r'</span>)</div><div class="line">g = open(<span class="string">'test1.txt'</span>,<span class="string">'w'</span>)</div><div class="line"></div><div class="line">p_num = <span class="number">0</span></div><div class="line">q_num = <span class="number">0</span></div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    line = f.readline()    </div><div class="line">    <span class="keyword">if</span> len(line):</div><div class="line">        p_num += <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> line == <span class="string">'\n'</span> <span class="keyword">or</span> line == <span class="string">'\r\n'</span> <span class="keyword">or</span> line == <span class="string">'\r'</span>:</div><div class="line">            <span class="keyword">continue</span>    </div><div class="line">        q_num += <span class="number">1</span></div><div class="line">        g.write(str(q_num)+<span class="string">" "</span>+line)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">break</span></div><div class="line"></div><div class="line">f.close()</div><div class="line">g.close()</div><div class="line"><span class="keyword">print</span> p_num,q_num</div></pre></td></tr></table></figure></p>
<p>再执行了一遍，控制台输出：</p>
<blockquote>
<p>22722 19485</p>
</blockquote>
<p>为什么有效行数仍然多了一行？首先需要找出有问题的行，于是我写了一段Python代码，避免手工排查：<br>（P.S.其实第一次手工排查前我就尝试写脚本排查，无奈因为不知道回车符，导致没有写出有效的脚本）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">f = open(<span class="string">'test1.txt'</span>,<span class="string">'r'</span>)</div><div class="line">g = open(<span class="string">'D:\\java\\Dev\\test.txt'</span>,<span class="string">'r'</span>)</div><div class="line"></div><div class="line">num = <span class="number">0</span></div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    line1 = f.readline()</div><div class="line">    line2 = g.readline()</div><div class="line">    num += <span class="number">1</span></div><div class="line">    <span class="keyword">if</span> line1 != line2:</div><div class="line">        <span class="keyword">if</span> len(line1) == len(line2)+<span class="number">1</span>:</div><div class="line">             <span class="keyword">continue</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">             <span class="keyword">break</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> len(line1):</div><div class="line">        <span class="keyword">break</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> num,len(line1),len(line2)</div><div class="line"></div><div class="line">f.close()</div><div class="line">g.close()</div></pre></td></tr></table></figure></p>
<p>因为text1.txt有些行有\r，所以有些行的长度会比text.txt中的对应行大1，但实际上有效内容是一致的，所以代码中进行了忽略这样的行。<br>执行后控制台输出：</p>
<blockquote>
<p>1265 8 77</p>
</blockquote>
<p>可以看到两个文件是在第1265行出现分歧的。有了之前的经验教训，我怀疑text1.txt的1265行的内容是”1265 \r\r\n”，通过对脚本的代码稍加修改：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">f = open(<span class="string">'test1.txt'</span>,<span class="string">'r'</span>)</div><div class="line">g = open(<span class="string">'D:\\java\\Dev\\test.txt'</span>,<span class="string">'r'</span>)</div><div class="line"></div><div class="line">num = <span class="number">0</span></div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    line1 = f.readline()</div><div class="line">    line2 = g.readline()</div><div class="line">    num += <span class="number">1</span></div><div class="line">    <span class="keyword">if</span> line1 != line2:</div><div class="line">        <span class="keyword">if</span> len(line1) == len(line2)+<span class="number">1</span>:</div><div class="line">            <span class="keyword">continue</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">if</span> num == <span class="number">1265</span>:</div><div class="line">                <span class="keyword">print</span> len(line1)</div><div class="line">                <span class="keyword">if</span> line1 == <span class="string">"1265 \r\r\n"</span>:</div><div class="line">                    <span class="keyword">print</span> <span class="string">'bingo'</span></div><div class="line">            <span class="keyword">break</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> len(line1):</div><div class="line">        <span class="keyword">break</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> num,len(line1),len(line2)</div><div class="line"></div><div class="line">f.close()</div><div class="line">g.close()</div></pre></td></tr></table></figure></p>
<p>控制台输出：</p>
<blockquote>
<p>8<br>bingo<br>1265 8 77</p>
</blockquote>
<p>证明我的判断是正确的。<br>至此，解决了有效行数不一致的问题。<br>那么为什么总行数会不相等呢？实际上，Python中f.readline()返回一行，不对这行做任何处理。而Java中input.nextLine()会获取从当前位置开始到一个结束符前的内容，然后去掉末尾的结束符返回。通过对本文Java代码稍加改写，可以发现’\r’，’\n’都会被认为是结束符。<br>比如：当文本中有一行的内容为”\r\n”时，<br>f.readline()会返回”\r\n”，行数加1。<br>input.nextLine()返回”\r”前的内容，也就是””，行数加1；<br>然后input.nextLine()会返回”\n”前的内容，也是””，行数加1。<br>读取这一行后，Java和Python的行数就出现不一致了。</p>
<blockquote>
<p>综上，对于Java中的Scanner的nextLine()方法，其名字中的nextline并不是真正意义上的下一行，准确地说应该是从当前位置到下一个结束符之前的内容。<br>Python的readline()方法返回真正意义上的一行，所以在对行做处理时，需要考虑行末是换行符或回车+换行符的情况。</p>
</blockquote>
<p>附上回车符与换行符的区别：</p>
<blockquote>
<p>CR：CarriageReturn，回车符，用’\r’表示，16进制代码为0x0D，光标移动到当前行的最左边。<br>LF：LineFeed，换行符，用’\n’表示，16进制代码为0x0A，把光标向下移动一行。</p>
<p>不同操作系统表示一行的结束不同：<br>Unix、Linux：\n表示回车+换行，\r无意义<br>Windows、DOS：\r\n表示回车+换行，顺序不能颠倒<br>Mac：\r表示回车+换行<br>(P.S.Mac OS 9以及之前的系统的换行符是CR，从Mac OS X（后来改名为OS X）开始的换行符是LF，和Unix/Linux统一了。)</p>
<p>影响：<br>（1）一个直接后果是，Unix/Mac系统下的文件在Windows里打开的话，所有文字会变成一行；<br>（2）而Windows里的文件在Unix/Mac下打开的话，在每行的结尾可能会多出一个^M符号。<br>（3）Linux保存的文件在windows上用记事本看的话会出现黑点。</p>
<p>相互转换：<br>在linux下，命令unix2dos 是把linux文件格式转换成windows文件格式，命令dos2unix 是把windows格式转换成linux文件格式。</p>
<p>在不同平台间使用FTP软件传送文件时, 在ascii文本模式传输模式下, 一些FTP客户端程序会自动对换行格式进行转换. 经过这种传输的文件字节数可能会发生变化.<br>如果你不想ftp修改原文件, 可以使用bin模式(二进制模式)传输文本。<br>一个程序在windows上运行就生成CR/LF换行格式的文本文件，而在Linux上运行就生成LF格式换行的文本文件。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨天晚上做NLP的时候，需要对文件做一些预处理。然后无意中发现一点小问题。通过用python和java分别对文件进行输出文本行数，发现不同。&lt;br&gt;输入文本文件:199801.txt&lt;br&gt;下面是Java实现的代码：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.io.*;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.*;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; FileNotFoundException &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        java.io.File in_file = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; java.io.File(&lt;span class=&quot;string&quot;&gt;&quot;199801.txt&quot;&lt;/span&gt;); &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Scanner input = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Scanner(in_file);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        java.io.File out_file = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; java.io.File(&lt;span class=&quot;string&quot;&gt;&quot;test.txt&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        java.io.PrintWriter output = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; java.io.PrintWriter(out_file);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//p_num表示文本总行数，q_num表示存在有效文字的行数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; p_num = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,q_num = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(input.hasNextLine())&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            String line = input.nextLine();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            ++p_num;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;.equals(line))&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            ++q_num;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            output.println(q_num+&lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt;+line);                &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(p_num+&lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt;+q_num);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        input.close();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        output.close();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Done!&quot;&lt;/span&gt;);    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://blade6.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Java" scheme="http://blade6.top/tags/Java/"/>
    
      <category term="技术" scheme="http://blade6.top/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Python" scheme="http://blade6.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>使用Hexo搭建个人博客小记</title>
    <link href="http://blade6.top/posts/21637/"/>
    <id>http://blade6.top/posts/21637/</id>
    <published>2016-11-01T03:26:18.000Z</published>
    <updated>2017-03-29T07:45:32.497Z</updated>
    
    <content type="html"><![CDATA[<p>今天购买了域名，基本上完成了博客的各项配置，接下来就可以开始写博客了。因为目前暂时没有什么干货，只好把建站的一些过程发上来撑撑场面，~_~</p>
<h3 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h3><p>其实在今年年初的时候，师兄就让我们搭建自己的博客。那个时候的我，完全0基础。硬是一个寒假在虚拟机上搭建了一个博客，那个时候只是把它当成作业来完成的，做得十分简陋，这里就不po上来献丑了。做好之后就搁置了。直到这个学期，前几周，计算机英语老师说计算机专业的学生怎么能没有自己的个人网站，于是我萌生了搭建博客网站的想法。因为现在Nodejs+Hexo+Github Pages搭建博客很流行，于是我也加入了这股潮流。说干就干，网上的资料十分多，可能是每个搭建博客的都写了一篇建站日志, : )<br><a id="more"></a></p>
<h3 id="建站大致过程"><a href="#建站大致过程" class="headerlink" title="建站大致过程"></a>建站大致过程</h3><ol>
<li>安装Git Bash,Nodejs,Hexo.</li>
<li>GitHub新建repo，并设置SSH.</li>
<li>下载安装next主题，并按照<a href="http://theme-next.iissnan.com/getting-started.html" rel="external nofollow noopener noreferrer" target="_blank">NexT</a>的内容进行各项参数的设置。<ul>
<li>多说评论、分享、热评文章</li>
<li>LeanCloud阅读次数统计</li>
<li>Local Search</li>
</ul>
</li>
<li>购买域名。</li>
<li>SEO推广</li>
<li>文章链接唯一永久化</li>
</ol>
<h4 id="更改阅读全文样式"><a href="#更改阅读全文样式" class="headerlink" title="更改阅读全文样式"></a>更改阅读全文样式</h4><p>打开<code>\themes\next\source\css\_common\components\post\post-button.styl</code>文件，修改成<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">.post-button &#123;</div><div class="line">  margin-top: 50px;</div><div class="line"></div><div class="line">  .btn &#123;</div><div class="line">    display: inline-block;</div><div class="line"></div><div class="line">    border-width: 2px;</div><div class="line">    border-style: solid;</div><div class="line">    border-color: rgb(85,85,85);</div><div class="line"></div><div class="line">    padding: 0 20px;</div><div class="line"></div><div class="line">    line-height: 2;</div><div class="line"></div><div class="line">    font-size: 14px;</div><div class="line"></div><div class="line">    color: #555555;</div><div class="line"></div><div class="line">    text-decoration: none;</div><div class="line"></div><div class="line">  &#125;</div><div class="line">  .btn:hover &#123;</div><div class="line">    color: white;</div><div class="line">    background-color: #222222;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://blog.shijinrong.cn/2016/01/03/How-to-build-a-blog/" rel="external nofollow noopener noreferrer" target="_blank">如何使用10个小时搭建出个人域名而又Geek的独立博客</a><br><a href="http://opiece.me/2015/04/09/hexo-guide/" rel="external nofollow noopener noreferrer" target="_blank">使用Hexo搭建个人博客(基于hexo3.0)</a><br><a href="http://willxue.coding.me/categories/hexo/" rel="external nofollow noopener noreferrer" target="_blank">Hexo系列教程</a><br><a href="http://www.wuxubj.cn/2016/08/Hexo-nexT-build-personal-blog/" rel="external nofollow noopener noreferrer" target="_blank">Hexo+nexT主题搭建个人博客</a><br><a href="http://blog.tangxiaozhu.com/p/45374067/" rel="external nofollow noopener noreferrer" target="_blank">使用Hexo搭建博客的深度优化</a><br><a href="http://www.jianshu.com/p/7ad9d3cd4d6e#" rel="external nofollow noopener noreferrer" target="_blank">将hexo博客同时托管到github和coding</a><br><a href="http://www.cnblogs.com/tengj/p/5357879.html" rel="external nofollow noopener noreferrer" target="_blank">hexo提交搜索引擎</a></p>
<p>在此致谢所有无形中帮助到我的人，谢谢你们的分享。互联网精神万岁！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天购买了域名，基本上完成了博客的各项配置，接下来就可以开始写博客了。因为目前暂时没有什么干货，只好把建站的一些过程发上来撑撑场面，~_~&lt;/p&gt;
&lt;h3 id=&quot;动机&quot;&gt;&lt;a href=&quot;#动机&quot; class=&quot;headerlink&quot; title=&quot;动机&quot;&gt;&lt;/a&gt;动机&lt;/h3&gt;&lt;p&gt;其实在今年年初的时候，师兄就让我们搭建自己的博客。那个时候的我，完全0基础。硬是一个寒假在虚拟机上搭建了一个博客，那个时候只是把它当成作业来完成的，做得十分简陋，这里就不po上来献丑了。做好之后就搁置了。直到这个学期，前几周，计算机英语老师说计算机专业的学生怎么能没有自己的个人网站，于是我萌生了搭建博客网站的想法。因为现在Nodejs+Hexo+Github Pages搭建博客很流行，于是我也加入了这股潮流。说干就干，网上的资料十分多，可能是每个搭建博客的都写了一篇建站日志, : )&lt;br&gt;
    
    </summary>
    
      <category term="Blog" scheme="http://blade6.top/categories/Blog/"/>
    
    
      <category term="hexo" scheme="http://blade6.top/tags/hexo/"/>
    
      <category term="blog" scheme="http://blade6.top/tags/blog/"/>
    
  </entry>
  
</feed>
